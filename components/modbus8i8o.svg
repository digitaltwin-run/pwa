<?xml version="1.0" encoding="UTF-8"?>
<svg xmlns="http://www.w3.org/2000/svg" width="400" height="350" viewBox="0 0 400 350">
    <title>Modbus RTU IO 8CH - Digital Twin</title>
    <desc>Interactive 8-channel digital input/output module with configurable modes and real-time status display</desc>

    <metadata>
        <component id="modbus-io-8ch-001" name="Modbus RTU IO 8CH" type="modbus-io">
            <parameters>
                <label>IO 8CH</label>
                <deviceAddress>1</deviceAddress>
                <baudRate>9600</baudRate>
                <isConnected>true</isConnected>
                <isActive>true</isActive>
                <!-- Channel configurations -->
                <channel1>
                    <inputState>false</inputState>
                    <outputState>false</outputState>
                    <outputMode>0</outputMode> <!-- 0:Normal, 1:Linkage, 2:Toggle, 3:Jump -->
                </channel1>
                <channel2>
                    <inputState>true</inputState>
                    <outputState>true</outputState>
                    <outputMode>1</outputMode>
                </channel2>
                <channel3>
                    <inputState>false</inputState>
                    <outputState>false</outputState>
                    <outputMode>0</outputMode>
                </channel3>
                <channel4>
                    <inputState>false</inputState>
                    <outputState>true</outputState>
                    <outputMode>0</outputMode>
                </channel4>
                <channel5>
                    <inputState>true</inputState>
                    <outputState>false</outputState>
                    <outputMode>2</outputMode>
                </channel5>
                <channel6>
                    <inputState>false</inputState>
                    <outputState>false</outputState>
                    <outputMode>0</outputMode>
                </channel6>
                <channel7>
                    <inputState>false</inputState>
                    <outputState>true</outputState>
                    <outputMode>0</outputMode>
                </channel7>
                <channel8>
                    <inputState>true</inputState>
                    <outputState>true</outputState>
                    <outputMode>1</outputMode>
                </channel8>
            </parameters>
        </component>
    </metadata>

    <!-- Main housing -->
    <rect class="module-housing" x="20" y="20" width="360" height="310" rx="5" ry="5"
          fill="#2c3e50" stroke="#1a252f" stroke-width="2"/>

    <!-- Title bar -->
    <rect x="20" y="20" width="360" height="35" rx="5" ry="5" fill="#1a252f"/>
    <text class="module-label" x="200" y="42" font-size="16" text-anchor="middle" fill="#ecf0f1">Modbus RTU IO 8CH</text>

    <!-- Power LED -->
    <circle class="power-led" cx="350" cy="37" r="5" fill="#27ae60"/>
    <text x="330" y="42" font-size="8" text-anchor="end" fill="#ecf0f1">PWR</text>

    <!-- RS485 terminal -->
    <g transform="translate(30, 290)">
        <rect x="0" y="0" width="80" height="30" rx="3" ry="3" fill="#7f8c8d" stroke="#34495e" stroke-width="1"/>
        <text x="40" y="20" font-size="10" text-anchor="middle" fill="#ecf0f1">RS485</text>
        <circle cx="15" cy="15" r="3" fill="#34495e"/>
        <circle cx="30" cy="15" r="3" fill="#34495e"/>
        <circle cx="50" cy="15" r="3" fill="#34495e"/>
        <circle cx="65" cy="15" r="3" fill="#34495e"/>
    </g>

    <!-- Power terminal -->
    <g transform="translate(290, 290)">
        <rect x="0" y="0" width="80" height="30" rx="3" ry="3" fill="#7f8c8d" stroke="#34495e" stroke-width="1"/>
        <text x="40" y="20" font-size="10" text-anchor="middle" fill="#ecf0f1">7-36V DC</text>
        <circle cx="20" cy="15" r="3" fill="#34495e"/>
        <circle cx="40" cy="15" r="3" fill="#34495e"/>
        <circle cx="60" cy="15" r="3" fill="#34495e"/>
    </g>

    <!-- Communication parameters -->
    <text class="comm-params" x="200" y="340" font-size="8" text-anchor="middle" fill="#95a5a6">9600 8-N-1 Addr:01</text>

    <!-- Input channels section -->
    <g class="input-section">
        <rect x="40" y="70" width="150" height="200" rx="3" ry="3" fill="#34495e" stroke="#2c3e50" stroke-width="1"/>
        <text x="115" y="85" font-size="12" text-anchor="middle" fill="#ecf0f1">DIGITAL INPUT</text>

        <!-- Input channels -->
        <g class="input-channels">
            <!-- DI1 -->
            <g transform="translate(50, 95)">
                <rect x="0" y="0" width="130" height="20" rx="2" ry="2" fill="#2c3e50"/>
                <text x="20" y="14" font-size="10" text-anchor="middle" fill="#ecf0f1">DI1</text>
                <circle class="input-led di1-led" cx="50" cy="10" r="5" fill="#333"/>
                <rect class="input-terminal" x="70" y="5" width="50" height="10" rx="2" ry="2" fill="#7f8c8d"/>
                <text class="input-state di1-state" x="95" y="13" font-size="8" text-anchor="middle" fill="#34495e">LOW</text>
            </g>

            <!-- DI2 -->
            <g transform="translate(50, 120)">
                <rect x="0" y="0" width="130" height="20" rx="2" ry="2" fill="#2c3e50"/>
                <text x="20" y="14" font-size="10" text-anchor="middle" fill="#ecf0f1">DI2</text>
                <circle class="input-led di2-led" cx="50" cy="10" r="5" fill="#3498db"/>
                <rect class="input-terminal" x="70" y="5" width="50" height="10" rx="2" ry="2" fill="#7f8c8d"/>
                <text class="input-state di2-state" x="95" y="13" font-size="8" text-anchor="middle" fill="#34495e">HIGH</text>
            </g>

            <!-- DI3 -->
            <g transform="translate(50, 145)">
                <rect x="0" y="0" width="130" height="20" rx="2" ry="2" fill="#2c3e50"/>
                <text x="20" y="14" font-size="10" text-anchor="middle" fill="#ecf0f1">DI3</text>
                <circle class="input-led di3-led" cx="50" cy="10" r="5" fill="#333"/>
                <rect class="input-terminal" x="70" y="5" width="50" height="10" rx="2" ry="2" fill="#7f8c8d"/>
                <text class="input-state di3-state" x="95" y="13" font-size="8" text-anchor="middle" fill="#34495e">LOW</text>
            </g>

            <!-- DI4 -->
            <g transform="translate(50, 170)">
                <rect x="0" y="0" width="130" height="20" rx="2" ry="2" fill="#2c3e50"/>
                <text x="20" y="14" font-size="10" text-anchor="middle" fill="#ecf0f1">DI4</text>
                <circle class="input-led di4-led" cx="50" cy="10" r="5" fill="#333"/>
                <rect class="input-terminal" x="70" y="5" width="50" height="10" rx="2" ry="2" fill="#7f8c8d"/>
                <text class="input-state di4-state" x="95" y="13" font-size="8" text-anchor="middle" fill="#34495e">LOW</text>
            </g>

            <!-- DI5 -->
            <g transform="translate(50, 195)">
                <rect x="0" y="0" width="130" height="20" rx="2" ry="2" fill="#2c3e50"/>
                <text x="20" y="14" font-size="10" text-anchor="middle" fill="#ecf0f1">DI5</text>
                <circle class="input-led di5-led" cx="50" cy="10" r="5" fill="#3498db"/>
                <rect class="input-terminal" x="70" y="5" width="50" height="10" rx="2" ry="2" fill="#7f8c8d"/>
                <text class="input-state di5-state" x="95" y="13" font-size="8" text-anchor="middle" fill="#34495e">HIGH</text>
            </g>

            <!-- DI6 -->
            <g transform="translate(50, 220)">
                <rect x="0" y="0" width="130" height="20" rx="2" ry="2" fill="#2c3e50"/>
                <text x="20" y="14" font-size="10" text-anchor="middle" fill="#ecf0f1">DI6</text>
                <circle class="input-led di6-led" cx="50" cy="10" r="5" fill="#333"/>
                <rect class="input-terminal" x="70" y="5" width="50" height="10" rx="2" ry="2" fill="#7f8c8d"/>
                <text class="input-state di6-state" x="95" y="13" font-size="8" text-anchor="middle" fill="#34495e">LOW</text>
            </g>

            <!-- DI7 -->
            <g transform="translate(50, 245)">
                <rect x="0" y="0" width="130" height="20" rx="2" ry="2" fill="#2c3e50"/>
                <text x="20" y="14" font-size="10" text-anchor="middle" fill="#ecf0f1">DI7</text>
                <circle class="input-led di7-led" cx="50" cy="10" r="5" fill="#333"/>
                <rect class="input-terminal" x="70" y="5" width="50" height="10" rx="2" ry="2" fill="#7f8c8d"/>
                <text class="input-state di7-state" x="95" y="13" font-size="8" text-anchor="middle" fill="#34495e">LOW</text>
            </g>

            <!-- DI8 -->
            <g transform="translate(50, 270)">
                <rect x="0" y="0" width="130" height="20" rx="2" ry="2" fill="#2c3e50"/>
                <text x="20" y="14" font-size="10" text-anchor="middle" fill="#ecf0f1">DI8</text>
                <circle class="input-led di8-led" cx="50" cy="10" r="5" fill="#3498db"/>
                <rect class="input-terminal" x="70" y="5" width="50" height="10" rx="2" ry="2" fill="#7f8c8d"/>
                <text class="input-state di8-state" x="95" y="13" font-size="8" text-anchor="middle" fill="#34495e">HIGH</text>
            </g>
        </g>
    </g>

    <!-- Output channels section -->
    <g class="output-section">
        <rect x="210" y="70" width="150" height="200" rx="3" ry="3" fill="#34495e" stroke="#2c3e50" stroke-width="1"/>
        <text x="285" y="85" font-size="12" text-anchor="middle" fill="#ecf0f1">DIGITAL OUTPUT</text>

        <!-- Output channels -->
        <g class="output-channels">
            <!-- DO1 -->
            <g transform="translate(220, 95)">
                <rect x="0" y="0" width="130" height="20" rx="2" ry="2" fill="#2c3e50"/>
                <text x="20" y="14" font-size="10" text-anchor="middle" fill="#ecf0f1">DO1</text>
                <circle class="output-led do1-led" cx="50" cy="10" r="5" fill="#333"/>
                <rect class="output-terminal" x="70" y="5" width="50" height="10" rx="2" ry="2" fill="#7f8c8d"/>
                <text class="output-mode do1-mode" x="95" y="13" font-size="8" text-anchor="middle" fill="#34495e">NORM</text>
            </g>

            <!-- DO2 -->
            <g transform="translate(220, 120)">
                <rect x="0" y="0" width="130" height="20" rx="2" ry="2" fill="#2c3e50"/>
                <text x="20" y="14" font-size="10" text-anchor="middle" fill="#ecf0f1">DO2</text>
                <circle class="output-led do2-led" cx="50" cy="10" r="5" fill="#e74c3c"/>
                <rect class="output-terminal" x="70" y="5" width="50" height="10" rx="2" ry="2" fill="#7f8c8d"/>
                <text class="output-mode do2-mode" x="95" y="13" font-size="8" text-anchor="middle" fill="#34495e">LINK</text>
            </g>

            <!-- DO3 -->
            <g transform="translate(220, 145)">
                <rect x="0" y="0" width="130" height="20" rx="2" ry="2" fill="#2c3e50"/>
                <text x="20" y="14" font-size="10" text-anchor="middle" fill="#ecf0f1">DO3</text>
                <circle class="output-led do3-led" cx="50" cy="10" r="5" fill="#333"/>
                <rect class="output-terminal" x="70" y="5" width="50" height="10" rx="2" ry="2" fill="#7f8c8d"/>
                <text class="output-mode do3-mode" x="95" y="13" font-size="8" text-anchor="middle" fill="#34495e">NORM</text>
            </g>

            <!-- DO4 -->
            <g transform="translate(220, 170)">
                <rect x="0" y="0" width="130" height="20" rx="2" ry="2" fill="#2c3e50"/>
                <text x="20" y="14" font-size="10" text-anchor="middle" fill="#ecf0f1">DO4</text>
                <circle class="output-led do4-led" cx="50" cy="10" r="5" fill="#e74c3c"/>
                <rect class="output-terminal" x="70" y="5" width="50" height="10" rx="2" ry="2" fill="#7f8c8d"/>
                <text class="output-mode do4-mode" x="95" y="13" font-size="8" text-anchor="middle" fill="#34495e">NORM</text>
            </g>

            <!-- DO5 -->
            <g transform="translate(220, 195)">
                <rect x="0" y="0" width="130" height="20" rx="2" ry="2" fill="#2c3e50"/>
                <text x="20" y="14" font-size="10" text-anchor="middle" fill="#ecf0f1">DO5</text>
                <circle class="output-led do5-led" cx="50" cy="10" r="5" fill="#333"/>
                <rect class="output-terminal" x="70" y="5" width="50" height="10" rx="2" ry="2" fill="#7f8c8d"/>
                <text class="output-mode do5-mode" x="95" y="13" font-size="8" text-anchor="middle" fill="#34495e">TOGL</text>
            </g>

            <!-- DO6 -->
            <g transform="translate(220, 220)">
                <rect x="0" y="0" width="130" height="20" rx="2" ry="2" fill="#2c3e50"/>
                <text x="20" y="14" font-size="10" text-anchor="middle" fill="#ecf0f1">DO6</text>
                <circle class="output-led do6-led" cx="50" cy="10" r="5" fill="#333"/>
                <rect class="output-terminal" x="70" y="5" width="50" height="10" rx="2" ry="2" fill="#7f8c8d"/>
                <text class="output-mode do6-mode" x="95" y="13" font-size="8" text-anchor="middle" fill="#34495e">NORM</text>
            </g>

            <!-- DO7 -->
            <g transform="translate(220, 245)">
                <rect x="0" y="0" width="130" height="20" rx="2" ry="2" fill="#2c3e50"/>
                <text x="20" y="14" font-size="10" text-anchor="middle" fill="#ecf0f1">DO7</text>
                <circle class="output-led do7-led" cx="50" cy="10" r="5" fill="#e74c3c"/>
                <rect class="output-terminal" x="70" y="5" width="50" height="10" rx="2" ry="2" fill="#7f8c8d"/>
                <text class="output-mode do7-mode" x="95" y="13" font-size="8" text-anchor="middle" fill="#34495e">NORM</text>
            </g>

            <!-- DO8 -->
            <g transform="translate(220, 270)">
                <rect x="0" y="0" width="130" height="20" rx="2" ry="2" fill="#2c3e50"/>
                <text x="20" y="14" font-size="10" text-anchor="middle" fill="#ecf0f1">DO8</text>
                <circle class="output-led do8-led" cx="50" cy="10" r="5" fill="#e74c3c"/>
                <rect class="output-terminal" x="70" y="5" width="50" height="10" rx="2" ry="2" fill="#7f8c8d"/>
                <text class="output-mode do8-mode" x="95" y="13" font-size="8" text-anchor="middle" fill="#34495e">LINK</text>
            </g>
        </g>
    </g>

    <defs>
        <!-- Internal SVG script -->
        <script><![CDATA[
        (function() {
            // Function to read metadata
            function getMetadata(svgElement) {
                const metadataElement = svgElement.querySelector('metadata component');
                if (metadataElement) {
                    try {
                        const parametersElement = metadataElement.querySelector('parameters');
                        if (parametersElement) {
                            const result = {
                                parameters: {
                                    label: parametersElement.querySelector('label')?.textContent || 'IO 8CH',
                                    deviceAddress: parseInt(parametersElement.querySelector('deviceAddress')?.textContent || '1'),
                                    baudRate: parseInt(parametersElement.querySelector('baudRate')?.textContent || '9600'),
                                    isConnected: parametersElement.querySelector('isConnected')?.textContent === 'true',
                                    isActive: parametersElement.querySelector('isActive')?.textContent === 'true',
                                    channels: []
                                }
                            };

                            // Read channel data
                            for (let i = 1; i <= 8; i++) {
                                const channelElement = parametersElement.querySelector(`channel${i}`);
                                if (channelElement) {
                                    result.parameters.channels[i-1] = {
                                        inputState: channelElement.querySelector('inputState')?.textContent === 'true',
                                        outputState: channelElement.querySelector('outputState')?.textContent === 'true',
                                        outputMode: parseInt(channelElement.querySelector('outputMode')?.textContent || '0')
                                    };
                                }
                            }
                            return result;
                        }
                    } catch (e) {
                        console.warn('Error parsing metadata:', e);
                    }
                }
                return {};
            }

            // Function to get mode text
            function getModeText(mode) {
                switch(mode) {
                    case 0: return 'NORM';
                    case 1: return 'LINK';
                    case 2: return 'TOGL';
                    case 3: return 'JUMP';
                    default: return 'NORM';
                }
            }

            // Function to update module appearance
            function updateModule(svgElement) {
                const metadata = getMetadata(svgElement);
                const params = metadata.parameters || {};

                const housing = svgElement.querySelector('.module-housing');
                const powerLed = svgElement.querySelector('.power-led');
                const labelEl = svgElement.querySelector('.module-label');
                const paramsEl = svgElement.querySelector('.comm-params');

                if (!housing || params.isActive === false) {
                    if (housing) housing.setAttribute('fill', '#1a1a1a');
                    if (powerLed) powerLed.setAttribute('fill', '#333');
                    return;
                }

                // Update label
                if (labelEl && params.label) {
                    labelEl.textContent = params.label;
                }

                // Update communication parameters
                if (paramsEl) {
                    paramsEl.textContent = `${params.baudRate} 8-N-1 Addr:${params.deviceAddress.toString().padStart(2, '0')}`;
                }

                // Update power LED
                if (powerLed) {
                    powerLed.setAttribute('fill', params.isConnected ? '#27ae60' : '#333');
                }

                // Update channels
                for (let i = 0; i < 8; i++) {
                    const channel = params.channels[i];
                    if (channel) {
                        // Update input LED and state
                        const inputLed = svgElement.querySelector(`.di${i+1}-led`);
                        const inputState = svgElement.querySelector(`.di${i+1}-state`);
                        if (inputLed) {
                            inputLed.setAttribute('fill', channel.inputState ? '#3498db' : '#333');
                        }
                        if (inputState) {
                            inputState.textContent = channel.inputState ? 'HIGH' : 'LOW';
                        }

                        // Update output LED and mode
                        const outputLed = svgElement.querySelector(`.do${i+1}-led`);
                        const outputMode = svgElement.querySelector(`.do${i+1}-mode`);

                        // Handle linkage mode
                        if (channel.outputMode === 1) {
                            channel.outputState = channel.inputState;
                        }

                        if (outputLed) {
                            outputLed.setAttribute('fill', channel.outputState ? '#e74c3c' : '#333');
                        }
                        if (outputMode) {
                            outputMode.textContent = getModeText(channel.outputMode);
                        }
                    }
                }
            }

            // Toggle input state
            function toggleInput(svgElement, channelNum) {
                const metadataElement = svgElement.querySelector('metadata component parameters');
                if (metadataElement) {
                    const channelElement = metadataElement.querySelector(`channel${channelNum}`);
                    if (channelElement) {
                        const inputStateElement = channelElement.querySelector('inputState');
                        const outputModeElement = channelElement.querySelector('outputMode');
                        const outputStateElement = channelElement.querySelector('outputState');

                        if (inputStateElement) {
                            const currentState = inputStateElement.textContent === 'true';
                            inputStateElement.textContent = (!currentState).toString();

                            // Handle toggle mode
                            if (outputModeElement && outputStateElement) {
                                const mode = parseInt(outputModeElement.textContent);
                                if (mode === 2 && !currentState) { // Toggle mode on rising edge
                                    const currentOutput = outputStateElement.textContent === 'true';
                                    outputStateElement.textContent = (!currentOutput).toString();
                                } else if (mode === 3) { // Jump mode on any edge
                                    const currentOutput = outputStateElement.textContent === 'true';
                                    outputStateElement.textContent = (!currentOutput).toString();
                                }
                            }
                        }
                    }
                    updateModule(svgElement);
                }
            }

            // Toggle output state
            function toggleOutput(svgElement, channelNum) {
                const metadataElement = svgElement.querySelector('metadata component parameters');
                if (metadataElement) {
                    const channelElement = metadataElement.querySelector(`channel${channelNum}`);
                    if (channelElement) {
                        const outputStateElement = channelElement.querySelector('outputState');
                        const outputModeElement = channelElement.querySelector('outputMode');

                        if (outputStateElement && outputModeElement) {
                            const mode = parseInt(outputModeElement.textContent);
                            // Only allow manual toggle in normal mode
                            if (mode === 0) {
                                const currentState = outputStateElement.textContent === 'true';
                                outputStateElement.textContent = (!currentState).toString();
                            }
                        }
                    }
                    updateModule(svgElement);
                }
            }

            // Cycle output mode
            function cycleOutputMode(svgElement, channelNum) {
                const metadataElement = svgElement.querySelector('metadata component parameters');
                if (metadataElement) {
                    const channelElement = metadataElement.querySelector(`channel${channelNum}`);
                    if (channelElement) {
                        const outputModeElement = channelElement.querySelector('outputMode');

                        if (outputModeElement) {
                            const currentMode = parseInt(outputModeElement.textContent);
                            const nextMode = (currentMode + 1) % 4;
                            outputModeElement.textContent = nextMode.toString();
                        }
                    }
                    updateModule(svgElement);
                }
            }

            // Initialize
            let svgElement = document.currentScript ? document.currentScript.closest('svg') : null;

            if (!svgElement) {
                const allSvgs = document.querySelectorAll('svg');
                for (const svg of allSvgs) {
                    if (svg.querySelector('.module-housing') && svg.querySelector('.input-channels')) {
                        svgElement = svg;
                        break;
                    }
                }
            }

            if (svgElement && !svgElement.hasAttribute('data-io-module-initialized')) {
                svgElement.setAttribute('data-io-module-initialized', 'true');
                svgElement.ioModuleInstanceId = 'io-module-' + Math.random().toString(36).substr(2, 9);

                // Add click event listeners
                for (let i = 1; i <= 8; i++) {
                    // Input terminals - toggle input state
                    const inputTerminal = svgElement.querySelector(`.di${i}-led`);
                    if (inputTerminal) {
                        inputTerminal.addEventListener('click', function(e) {
                            toggleInput(svgElement, i);
                            e.stopPropagation();
                        });
                        inputTerminal.style.cursor = 'pointer';
                    }

                    // Output LEDs - toggle output state
                    const outputLed = svgElement.querySelector(`.do${i}-led`);
                    if (outputLed) {
                        outputLed.addEventListener('click', function(e) {
                            toggleOutput(svgElement, i);
                            e.stopPropagation();
                        });
                        outputLed.style.cursor = 'pointer';
                    }

                    // Output mode text - cycle mode
                    const outputMode = svgElement.querySelector(`.do${i}-mode`);
                    if (outputMode) {
                        outputMode.addEventListener('click', function(e) {
                            cycleOutputMode(svgElement, i);
                            e.stopPropagation();
                        });
                        outputMode.style.cursor = 'pointer';
                    }
                }

                // Initial update
                updateModule(svgElement);

                // Poll for metadata changes
                svgElement.pollingInterval = setInterval(() => {
                    if (!svgElement.isConnected) {
                        clearInterval(svgElement.pollingInterval);
                        return;
                    }

                    const metadata = getMetadata(svgElement);
                    const params = metadata.parameters || {};

                    if (!svgElement.currentParams) {
                        svgElement.currentParams = {};
                    }

                    // Check if update needed
                    const hasChanged = JSON.stringify(params) !== JSON.stringify(svgElement.currentParams);

                    if (hasChanged) {
                        svgElement.currentParams = JSON.parse(JSON.stringify(params));
                        updateModule(svgElement);
                    }
                }, 100);

                // Cleanup
                function cleanup() {
                    if (svgElement.pollingInterval) clearInterval(svgElement.pollingInterval);
                }

                window.addEventListener('beforeunload', cleanup);
            }
        })();
        ]]></script>
    </defs>
</svg>
