<?xml version="1.0" encoding="UTF-8"?>
<svg xmlns="http://www.w3.org/2000/svg" width="80" height="60" viewBox="0 0 80 60" onload="initDisplay(evt)" preserveAspectRatio="none">
    <metadata>
        <component id="display-001" name="HTML Display" type="display">
            <parameters>
                <label>Display</label>
                <color>#3498db</color>
                <url>about:blank</url>
                <refreshInterval>0</refreshInterval>
                <isActive>true</isActive>
                <aspectRatio>16:9</aspectRatio>
                <allowFullScreen>true</allowFullScreen>
                <scaleX>1.0</scaleX>
                <scaleY>1.0</scaleY>
                <minWidth>40</minWidth>
                <minHeight>30</minHeight>
                <preserveAspectRatio>true</preserveAspectRatio>
                <originalWidth>80</originalWidth>
                <originalHeight>60</originalHeight>
                <padding>5</padding>
                <statusBarHeight>12</statusBarHeight>
            </parameters>
        </component>
    </metadata>

    <defs>
        <script type="text/ecmascript">
        <![CDATA[
            var displayParams = {
                // These will be populated from metadata
                refreshTimer: null,
                
                // Default values (will be overridden by metadata)
                url: 'about:blank',
                refreshInterval: 0,
                isActive: true,
                aspectRatio: '16:9',
                allowFullScreen: true,
                scaleX: 1.0,
                scaleY: 1.0,
                minWidth: 40,
                minHeight: 30,
                preserveAspectRatio: true,
                originalWidth: 80,
                originalHeight: 60,
                padding: 5,
                statusBarHeight: 12
            };
            
            // Helper function to get parameter value with default
            function getParam(params, name, defaultValue) {
                const value = params[name];
                if (value === undefined || value === '') return defaultValue;
                
                // Convert string values to appropriate types
                if (typeof defaultValue === 'number') return parseFloat(value) || defaultValue;
                if (typeof defaultValue === 'boolean') return value !== 'false' && value !== false;
                return value;
            }

            function initDisplay(evt) {
                var svg = evt.target.ownerDocument;
                var svgRoot = svg.documentElement;
                var params = getParameters(svg);
                
                // Load all parameters from metadata with defaults
                displayParams.url = getParam(params, 'url', 'about:blank');
                displayParams.refreshInterval = getParam(params, 'refreshInterval', 0);
                displayParams.isActive = getParam(params, 'isActive', true);
                displayParams.aspectRatio = getParam(params, 'aspectRatio', '16:9');
                displayParams.allowFullScreen = getParam(params, 'allowFullScreen', true);
                displayParams.scaleX = getParam(params, 'scaleX', 1.0);
                displayParams.scaleY = getParam(params, 'scaleY', 1.0);
                displayParams.minWidth = getParam(params, 'minWidth', 40);
                displayParams.minHeight = getParam(params, 'minHeight', 30);
                displayParams.preserveAspectRatio = getParam(params, 'preserveAspectRatio', true);
                displayParams.originalWidth = getParam(params, 'originalWidth', 80);
                displayParams.originalHeight = getParam(params, 'originalHeight', 60);
                displayParams.padding = getParam(params, 'padding', 5);
                displayParams.statusBarHeight = getParam(params, 'statusBarHeight', 12);
                
                // Calculate derived values
                displayParams.originalViewBox = '0 0 ' + displayParams.originalWidth + ' ' + displayParams.originalHeight;
                
                // Apply initial scaling
                applyScaling(svgRoot);
                
                // Create iframe container
                createIframeContainer(svg);
                
                // Load initial content
                updateDisplay(svg);
                
                // Make the display resizable
                makeResizable(svg, svgRoot);
            }
            
            function getParameters(svg) {
                var params = {};
                var paramElements = svg.getElementsByTagName('parameters')[0].children;
                for (var i = 0; i < paramElements.length; i++) {
                    var el = paramElements[i];
                    params[el.tagName] = el.textContent;
                }
                return params;
            }
            
            function createIframeContainer(svg) {
                // Create foreignObject for HTML content
                var foreignObject = document.createElementNS('http://www.w3.org/2000/svg', 'foreignObject');
                foreignObject.setAttribute('x', '5');
                foreignObject.setAttribute('y', '5');
                foreignObject.setAttribute('width', '70');
                foreignObject.setAttribute('height', '50');
                foreignObject.setAttribute('id', 'displayContent');
                
                // Add to SVG
                svg.documentElement.appendChild(foreignObject);
            }
            
            function updateDisplay(svg) {
                var displayContent = svg.getElementById('displayContent');
                if (!displayContent) return;
                
                // Clear existing content
                while (displayContent.firstChild) {
                    displayContent.removeChild(displayContent.firstChild);
                }
                
                if (!displayParams.isActive || !displayParams.url) {
                    // Show placeholder when inactive or no URL
                    var placeholder = document.createElementNS('http://www.w3.org/1999/xhtml', 'div');
                    placeholder.style.width = '100%';
                    placeholder.style.height = '100%';
                    placeholder.style.backgroundColor = '#ecf0f1';
                    placeholder.style.display = 'flex';
                    placeholder.style.alignItems = 'center';
                    placeholder.style.justifyContent = 'center';
                    placeholder.style.color = '#7f8c8d';
                    placeholder.style.fontFamily = 'Arial, sans-serif';
                    placeholder.style.fontSize = '10px';
                    placeholder.textContent = displayParams.url || 'No content';
                    displayContent.appendChild(placeholder);
                    return;
                }
                
                try {
                    // Create iframe
                    var iframe = document.createElementNS('http://www.w3.org/1999/xhtml', 'iframe');
                    iframe.setAttribute('width', '100%');
                    iframe.setAttribute('height', '100%');
                    iframe.setAttribute('frameborder', '0');
                    iframe.setAttribute('sandbox', 'allow-same-origin allow-scripts allow-popups allow-forms');
                    iframe.setAttribute('src', displayParams.url);
                    
                    if (displayParams.allowFullScreen) {
                        iframe.setAttribute('allowfullscreen', '');
                    }
                    
                    // Apply aspect ratio
                    var [w, h] = displayParams.aspectRatio.split(':').map(Number);
                    if (w && h) {
                        var ratio = h / w;
                        iframe.style.aspectRatio = `${w} / ${h}`;
                    }
                    
                    displayContent.appendChild(iframe);
                    
                    // Set up refresh if needed
                    setupRefreshTimer(svg);
                    
                } catch (e) {
                    console.error('Error loading display content:', e);
                }
            }
            
            function setupRefreshTimer(svg) {
                // Clear existing timer
                if (displayParams.refreshTimer) {
                    clearTimeout(displayParams.refreshTimer);
                    displayParams.refreshTimer = null;
                }
                
                // Set up new timer if refresh interval is positive
                if (displayParams.refreshInterval > 0) {
                    displayParams.refreshTimer = setTimeout(function() {
                        updateDisplay(svg);
                    }, displayParams.refreshInterval * 1000);
                }
            }
            
            // Public API
            function setDisplayUrl(url) {
                displayParams.url = url || 'about:blank';
                updateDisplay(document);
            }
            
            function setRefreshInterval(seconds) {
                displayParams.refreshInterval = Math.max(0, parseInt(seconds) || 0);
                setupRefreshTimer(document);
            }
            
            function setActive(isActive) {
                displayParams.isActive = isActive !== false;
                updateDisplay(document);
            }
            
            function setAspectRatio(ratio) {
                if (typeof ratio === 'string' && ratio.includes(':')) {
                    displayParams.aspectRatio = ratio;
                    updateDisplay(document);
                }
            }
            
            // Apply scaling to the SVG element
            function applyScaling(svgRoot) {
                if (!svgRoot) return;
                
                // Calculate new dimensions
                var newWidth = Math.max(displayParams.minWidth, displayParams.originalWidth * displayParams.scaleX);
                var newHeight = Math.max(displayParams.minHeight, displayParams.originalHeight * displayParams.scaleY);
                
                // Update SVG dimensions
                svgRoot.setAttribute('width', newWidth);
                svgRoot.setAttribute('height', newHeight);
                
                // Update viewBox to maintain proportions
                if (displayParams.preserveAspectRatio) {
                    svgRoot.setAttribute('preserveAspectRatio', 'xMidYMid meet');
                } else {
                    svgRoot.setAttribute('preserveAspectRatio', 'none');
                }
                
                // Update the display content container
                updateContentSize(svgRoot);
            }
            
            // Update the content container size based on current dimensions
            function updateContentSize(svgRoot) {
                var displayContent = svgRoot.getElementById('displayContent');
                if (!displayContent) return;
                
                // Calculate content area (with padding from metadata)
                var padding = displayParams.padding;
                var contentX = padding * displayParams.scaleX;
                var contentY = (displayParams.statusBarHeight + padding) * displayParams.scaleY;
                var contentWidth = displayParams.originalWidth * displayParams.scaleX - (2 * padding * displayParams.scaleX);
                var contentHeight = (displayParams.originalHeight - displayParams.statusBarHeight - padding) * displayParams.scaleY;
                
                // Update content container
                displayContent.setAttribute('x', contentX);
                displayContent.setAttribute('y', contentY);
                displayContent.setAttribute('width', contentWidth);
                displayContent.setAttribute('height', contentHeight);
                
                // Update status bar
                var statusBar = svgRoot.getElementById('statusBar');
                if (statusBar) {
                    statusBar.setAttribute('width', contentWidth);
                    statusBar.setAttribute('x', contentX);
                    statusBar.setAttribute('y', contentY);
                }
                
                // Update label position
                var label = svgRoot.getElementById('label');
                if (label) {
                    label.setAttribute('x', contentX + 5);
                    label.setAttribute('y', contentY + 10);
                }
            }
            
            // Make the display resizable
            function makeResizable(svg, svgRoot) {
                var resizeHandle = document.createElementNS('http://www.w3.org/2000/svg', 'rect');
                resizeHandle.setAttribute('class', 'resize-handle');
                
                // Calculate handle size based on component size (10% of the smaller dimension, with min/max limits)
                var handleSize = Math.max(
                    8, // min size
                    Math.min(
                        Math.min(displayParams.originalWidth, displayParams.originalHeight) * 0.1, 
                        15 // max size
                    )
                );
                
                // Position handle in bottom-right corner with small margin
                var handleMargin = 2;
                var handleX = displayParams.originalWidth - handleSize - handleMargin;
                var handleY = displayParams.originalHeight - handleSize - handleMargin;
                
                resizeHandle.setAttribute('x', handleX);
                resizeHandle.setAttribute('y', handleY);
                resizeHandle.setAttribute('width', handleSize);
                resizeHandle.setAttribute('height', handleSize);
                resizeHandle.setAttribute('fill', displayParams.color || '#3498db');
                resizeHandle.setAttribute('rx', '3');
                resizeHandle.setAttribute('style', 'cursor: nwse-resize;');
                
                svgRoot.appendChild(resizeHandle);
                
                var isResizing = false;
                var startX, startY, startWidth, startHeight, startScaleX, startScaleY;
                
                resizeHandle.addEventListener('mousedown', startResize);
                
                function startResize(e) {
                    e.stopPropagation();
                    isResizing = true;
                    startX = e.clientX;
                    startY = e.clientY;
                    startWidth = parseFloat(svgRoot.getAttribute('width'));
                    startHeight = parseFloat(svgRoot.getAttribute('height'));
                    startScaleX = displayParams.scaleX;
                    startScaleY = displayParams.scaleY;
                    
                    document.addEventListener('mousemove', resize);
                    document.addEventListener('mouseup', stopResize);
                }
                
                function resize(e) {
                    if (!isResizing) return;
                    
                    var dx = e.clientX - startX;
                    var dy = e.clientY - startY;
                    
                    // Calculate new dimensions
                    var newWidth = Math.max(displayParams.minWidth, startWidth + dx);
                    var newHeight = Math.max(displayParams.minHeight, startHeight + dy);
                    
                    // Calculate scale factors
                    displayParams.scaleX = newWidth / displayParams.originalWidth;
                    displayParams.scaleY = newHeight / displayParams.originalHeight;
                    
                    // Apply scaling
                    applyScaling(svgRoot);
                    
                    // Update display content
                    updateDisplay(svg);
                }
                
                function stopResize() {
                    isResizing = false;
                    document.removeEventListener('mousemove', resize);
                    document.removeEventListener('mouseup', stopResize);
                }
            }
            
            // Public API for setting scale
            function setScale(scaleX, scaleY) {
                if (scaleX > 0) displayParams.scaleX = scaleX;
                if (scaleY > 0) displayParams.scaleY = scaleY;
                applyScaling(document.documentElement);
                updateDisplay(document);
            }
            
            // Public API for setting minimum dimensions
            function setMinDimensions(minWidth, minHeight) {
                if (minWidth > 0) displayParams.minWidth = minWidth;
                if (minHeight > 0) displayParams.minHeight = minHeight;
                applyScaling(document.documentElement);
                updateDisplay(document);
            }
        ]]>
        </script>
    </defs>

    <!-- Display frame -->
    <rect x="2" y="2" width="76" height="56" rx="4" fill="#ecf0f1" stroke="#bdc3c7" stroke-width="1" />
    <rect x="5" y="5" width="70" height="50" rx="2" fill="#fff" stroke="#95a5a6" stroke-width="1" />
    
    <!-- Status bar -->
    <rect id="statusBar" x="5" y="5" width="70" height="12" fill="#3498db" rx="2" />
    <text id="label" x="10" y="15" font-size="8" fill="white">Display</text>
    
    <!-- Content will be inserted here by JavaScript -->
    
    <!-- Hidden style for resize handle -->
    <style>
        .resize-handle {
            fill: #3498db;
            cursor: nwse-resize;
            opacity: 0.7;
        }
        .resize-handle:hover {
            opacity: 1;
        }
    </style>
    <metadata>
        <component id="display-001" name="HMI Display" type="display">
            <parameters>
                <label>Panel</label>
                <color>#2c3e50</color>
                <text>Ready</text>
                <status>OK</status>
                <backlight>true</backlight>
            </parameters>
        </component>
    </metadata>


  <rect id="body" x="5" y="5" width="70" height="50" rx="8" fill="#2c3e50" stroke="#34495e" stroke-width="2"/>
  <rect x="15" y="15" width="50" height="20" fill="#ecf0f1" rx="4"/>
  <text id="label" x="40" y="48" font-size="12" text-anchor="middle" fill="#bdc3c7">Panel</text>
  <text id="value" x="40" y="28" font-size="14" text-anchor="middle" fill="#2c3e50">Ready</text>
</svg>
