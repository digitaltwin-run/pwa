<?xml version="1.0" encoding="UTF-8"?>
<svg xmlns="http://www.w3.org/2000/svg" width="60" height="60" viewBox="0 0 60 60" data-component-params="label,color,size,value,minvalue,maxvalue,unit,isactive,updateinterval,variance,ison,isblinking,blinkrate">
    <metadata>
        <component id="sensor-001" name="Temperature Sensor" type="sensor">
            <parameters>
                <label>Temp</label>
                <color>#e74c3c</color>
                <size>50</size>
                <value>25</value>
                <minValue>-20</minValue>
                <maxValue>120</maxValue>
                <unit>째C</unit>
                <isActive>true</isActive>
                <updateInterval>1000</updateInterval>
                <variance>2</variance>
            <ison>false</ison><isblinking>false</isblinking><blinkrate>500</blinkrate></parameters>
        </component>
    </metadata>

    <defs>
(function() {
                // Create instance-specific sensor state
                var sensorInstance = {
                    value: 25,
                    min: -20,
                    max: 120,
                    unit: '째C',
                    variance: 2,
                    updateInterval: 1000,
                    isActive: true,
                    targetValue: 25,
                    animationFrame: null,
                    svgElement: null
                };

                function initSensorInstance(evt) {
                    var svgEl = evt.target;
                    // Find the parent SVG element that contains this script
                    while (svgEl && svgEl.tagName !== 'svg') {
                        svgEl = svgEl.parentNode;
                    }
                    
                    if (!svgEl) {
                        console.error('Could not find parent SVG element for sensor');
                        return;
                    }
                    
                    sensorInstance.svgElement = svgEl;
                    
                    // Mark this SVG as initialized to prevent double initialization
                    if (svgEl.getAttribute('data-sensor-initialized')) {
                        return;
                    }
                    svgEl.setAttribute('data-sensor-initialized', 'true');
                    
                    var params = getParameters(svgEl);
                    
                    // Initialize parameters
                    sensorInstance.value = parseFloat(params.value) || 25;
                    sensorInstance.min = parseFloat(params.minValue) || -20;
                    sensorInstance.max = parseFloat(params.maxValue) || 120;
                    sensorInstance.unit = params.unit || '째C';
                    sensorInstance.variance = parseFloat(params.variance) || 2;
                    sensorInstance.updateInterval = parseInt(params.updateInterval) || 1000;
                    sensorInstance.isActive = params.isActive !== 'false';
                    sensorInstance.targetValue = sensorInstance.value;
                    
                    // Store instance reference on SVG element
                    svgEl.sensorInstance = sensorInstance;
                    
                    // Set initial state
                    updateSensorDisplay(svgEl);
                    
                    // Start simulation
                    startSensorSimulation(svgEl);
                    
                    console.log('Sensor initialized for SVG element:', svgEl.getAttribute('data-id'));
                }
                
                function getParameters(svg) {
                    var params = {};
                    var parametersElements = svg.getElementsByTagName('parameters');
                    if (parametersElements.length > 0) {
                        var paramElements = parametersElements[0].children;
                        for (var i = 0; i < paramElements.length; i++) {
                            var el = paramElements[i];
                            params[el.tagName] = el.textContent;
                        }
                    }
                    return params;
                }
                
                function startSensorSimulation(svg) {
                    if (!svg || !svg.sensorInstance) return;
                    
                    var instance = svg.sensorInstance;
                    
                    if (instance.animationFrame) {
                        clearTimeout(instance.animationFrame);
                    }
                    
                    function update() {
                        if (!svg.isConnected) {
                            // Clean up if element was removed
                            if (instance.animationFrame) {
                                clearTimeout(instance.animationFrame);
                                instance.animationFrame = null;
                            }
                            return;
                        }
                        
                        if (instance.isActive) {
                            // Add small random variation to simulate real sensor
                            var variation = (Math.random() * 2 - 1) * instance.variance;
                            instance.value = Math.max(instance.min, 
                                                       Math.min(instance.max, 
                                                               instance.targetValue + variation));
                            
                            updateSensorDisplay(svg);
                        }
                        
                        instance.animationFrame = setTimeout(update, instance.updateInterval);
                    }
                    
                    update();
                }
                
                function updateSensorDisplay(svg) {
                    if (!svg || !svg.sensorInstance) return;
                    
                    var instance = svg.sensorInstance;
                    var valueText = svg.querySelector('#value');
                    var indicator = svg.querySelector('#indicator');
                    
                    if (valueText) {
                        valueText.textContent = Math.round(instance.value * 10) / 10 + instance.unit;
                    }
                    
                    if (indicator) {
                        // Update indicator color based on value
                        var normalized = (instance.value - instance.min) / 
                                       (instance.max - instance.min);
                        
                        // Calculate color gradient from blue to red
                        var r, g, b;
                        if (normalized < 0.5) {
                            // Blue to green
                            r = Math.round(0 * 255);
                            g = Math.round(normalized * 2 * 255);
                            b = Math.round((1 - normalized * 2) * 255);
                        } else {
                            // Green to red
                            r = Math.round((normalized - 0.5) * 2 * 255);
                            g = Math.round((1 - (normalized - 0.5) * 2) * 255);
                            b = 0;
                        }
                        
                        var color = 'rgb(' + r + ', ' + g + ', ' + b + ')';
                        indicator.setAttribute('fill', color);
                    }
                }
                
                // Public API functions attached to SVG element
                function setupSensorAPI(svg) {
                    if (!svg.sensorInstance) return;
                    
                    svg.setSensorValue = function(value) {
                        svg.sensorInstance.targetValue = Math.max(svg.sensorInstance.min, 
                                                         Math.min(svg.sensorInstance.max, 
                                                                 parseFloat(value) || 0));
                    };
                    
                    svg.getSensorValue = function() {
                        return svg.sensorInstance.value;
                    };
                    
                    svg.setActive = function(isActive) {
                        svg.sensorInstance.isActive = isActive;
                        if (isActive && !svg.sensorInstance.animationFrame) {
                            startSensorSimulation(svg);
                        }
                    };
                }
                
                // Initialize when this script loads
                // Use a small delay to ensure DOM is ready
                setTimeout(function() {
                    initSensorInstance({ target: document.currentScript || document.scripts[document.scripts.length - 1] });
                }, 10);
            })();
        ]]>
        </script>
    </defs>

    <rect id="body" x="5" y="5" width="50" height="50" rx="8" fill="#e74c3c" stroke="#c0392b" stroke-width="2"/>
    <text id="label" x="30" y="20" font-size="12" text-anchor="middle" fill="white">Temp</text>
    <text id="value" x="30" y="38" font-size="14" text-anchor="middle" fill="white">25째C</text>
    <circle id="indicator" cx="30" cy="50" r="4" fill="#ecf0f1"/>
</svg>