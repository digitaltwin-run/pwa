<?xml version="1.0" encoding="UTF-8"?>
<svg xmlns="http://www.w3.org/2000/svg" width="60" height="60" viewBox="0 0 60 60" data-component-params="label,color,size,value,minvalue,maxvalue,unit,isactive,updateinterval,variance,ison,isblinking,blinkrate">
    <metadata>
        <component id="sensor-001" name="Temperature Sensor" type="sensor">
            <parameters>
                <label>Temp</label>
                <color>#e74c3c</color>
                <size>50</size>
                <value>25</value>
                <minValue>-20</minValue>
                <maxValue>120</maxValue>
                <unit>°C</unit>
                <isActive>true</isActive>
                <updateInterval>1000</updateInterval>
                <variance>2</variance>
            <ison>false</ison><isblinking>false</isblinking><blinkrate>500</blinkrate></parameters>
        </component>
    </metadata>

    <defs>
        <script>
        <![CDATA[
            (function() {
                // Function to read metadata from SVG
                function getMetadata(svgElement) {
                    var metadataElement = svgElement.querySelector('metadata component');
                    if (metadataElement) {
                        try {
                            var parametersElement = metadataElement.querySelector('parameters');
                            if (parametersElement) {
                                var result = {
                                    parameters: {
                                        value: parseFloat(parametersElement.querySelector('value')?.textContent || '50'),
                                        valueMin: parseFloat(parametersElement.querySelector('minValue')?.textContent || '0'),
                                        valueMax: parseFloat(parametersElement.querySelector('maxValue')?.textContent || '100'),
                                        unit: parametersElement.querySelector('unit')?.textContent || '%',
                                        threshold: parseFloat(parametersElement.querySelector('threshold')?.textContent || '75'),
                                        isActive: parametersElement.querySelector('isActive')?.textContent !== 'false',
                                        label: parametersElement.querySelector('label')?.textContent || 'Sensor'
                                    }
                                };
                                return result;
                            }
                        } catch (e) {
                            console.warn('Error parsing sensor metadata:', e);
                        }
                    }
                    return {};
                }

                // Function to update sensor display
                function updateSensor(svgElement) {
                    var metadata = getMetadata(svgElement);
                    var params = metadata.parameters || {};
                    
                    var gauge = svgElement.querySelector('.sensor-gauge');
                    if (gauge) {
                        var percentage = (params.value - params.valueMin) / (params.valueMax - params.valueMin);
                        percentage = Math.max(0, Math.min(1, percentage));
                        var height = 25 * percentage;
                        gauge.setAttribute('height', height);
                        gauge.setAttribute('y', 35 - height);
                    }
                    
                    var valueText = svgElement.querySelector('.sensor-value');
                    if (valueText) {
                        valueText.textContent = params.value.toFixed(1) + params.unit;
                    }
                    
                    var indicator = svgElement.querySelector('.sensor-indicator');
                    if (indicator) {
                        var color = '#2ecc71'; // Normal (green)
                        if (!params.isActive) {
                            color = '#95a5a6'; // Inactive (gray)
                        } else if (params.value >= params.threshold) {
                            color = '#e74c3c'; // Over threshold (red)
                        } else if (params.value >= params.threshold * 0.8) {
                            color = '#f39c12'; // Warning (orange)
                        }
                        indicator.setAttribute('fill', color);
                    }
                }
                
                // Public API functions attached to SVG element
                function setupSensorAPI(svg) {
                    if (!svg.sensorInstance) return;
                    
                    svg.setSensorValue = function(value) {
                        svg.sensorInstance.targetValue = Math.max(svg.sensorInstance.min, 
                                                         Math.min(svg.sensorInstance.max, 
                                                                 parseFloat(value) || 0));
                    };
                    
                    svg.getSensorValue = function() {
                        return svg.sensorInstance.value;
                    };
                    
                    svg.setActive = function(isActive) {
                        svg.sensorInstance.isActive = isActive;
                        if (isActive && !svg.sensorInstance.animationFrame) {
                            startSensorSimulation(svg);
                        }
                    };
                }
                
                // Initialize when this script loads
                // Use a small delay to ensure DOM is ready
                setTimeout(function() {
                    initSensorInstance({ target: document.currentScript || document.scripts[document.scripts.length - 1] });
                }, 10);
            })();
        ]]>
        </script>
    </defs>

    <rect id="body" x="5" y="5" width="50" height="50" rx="8" fill="#e74c3c" stroke="#c0392b" stroke-width="2"/>
    <text id="label" x="30" y="20" font-size="12" text-anchor="middle" fill="white">Temp</text>
    <text id="value" x="30" y="38" font-size="14" text-anchor="middle" fill="white">25°C</text>
    <circle id="indicator" cx="30" cy="50" r="4" fill="#ecf0f1"/>
</svg>