<?xml version="1.0" encoding="UTF-8"?>
<svg xmlns="http://www.w3.org/2000/svg"
     xmlns:xhtml="http://www.w3.org/1999/xhtml"
     width="40"
     height="40"
     viewBox="0 0 40 40">

    <title>Rotary Knob Component</title>
    <desc>Interactive rotary knob component with click animation for digital twin</desc>

    <metadata>
        {
        "id": "knob-001",
        "name": "Rotary Knob",
        "type": "knob",
        "parameters": {
            "label": "Knob",
            "value": 50,
            "min": 0,
            "max": 100,
            "color": "#2980b9",
            "size": 40,
            "isActive": true
            }
        }
    </metadata>

    <!-- Base -->
    <circle cx="20" cy="20" r="18" fill="#34495e" stroke="#2c3e50" stroke-width="1.5"/>
    
    <!-- Knob body -->
    <circle class="knob-body" cx="20" cy="20" r="14" fill="#7f8c8d" stroke="#2c3e50" stroke-width="1"/>
    
    <!-- Indicator line -->
    <line class="knob-indicator" x1="20" y1="20" x2="20" y2="9" stroke="#ecf0f1" stroke-width="2" stroke-linecap="round"/>
    
    <!-- Central dot -->
    <circle cx="20" cy="20" r="3" fill="#2c3e50"/>
    
    <!-- Label -->
    <text class="knob-label" x="20" y="36" font-size="8" text-anchor="middle" fill="#bdc3c7">Knob</text>
    
    <!-- Value display -->
    <text class="knob-value" x="20" y="21" font-size="8" text-anchor="middle" fill="#ecf0f1">50</text>

    <defs>
    <!-- Internal SVG script -->
    <script><![CDATA[
      (function() {
        // Function to read metadata
        function getMetadata(svgElement) {
          const metadataNode = svgElement.querySelector('metadata');
          if (metadataNode && metadataNode.textContent.trim()) {
            try {
              return JSON.parse(metadataNode.textContent);
            } catch (e) {
              console.warn('Error parsing metadata:', e);
              return {};
            }
          }
          return {};
        }

        // Function to update knob appearance and rotation
        function updateKnob(svgElement) {
          const metadata = getMetadata(svgElement);
          const params = metadata.parameters || {};
          
          const knobBody = svgElement.querySelector('.knob-body');
          const indicator = svgElement.querySelector('.knob-indicator');
          const labelEl = svgElement.querySelector('.knob-label');
          const valueEl = svgElement.querySelector('.knob-value');

          if (!knobBody || !indicator || !params.isActive) {
            if (knobBody) knobBody.setAttribute('fill', '#555');
            return;
          }

          // Update label
          if (labelEl && params.label) {
            labelEl.textContent = params.label;
          }

          // Update knob body color
          knobBody.setAttribute('fill', params.color || '#7f8c8d');
          
          // Calculate rotation angle based on value, min and max
          const min = params.min || 0;
          const max = params.max || 100;
          const value = Math.min(Math.max(params.value, min), max);
          const percentage = (value - min) / (max - min);
          const angle = percentage * 270 - 135; // -135° to +135° rotation
          
          // Apply rotation to indicator
          indicator.setAttribute('transform', `rotate(${angle} 20 20)`);
          
          // Update value text
          if (valueEl) {
            valueEl.textContent = value;
          }
        }

        // Initialize
        const svgElement = document.querySelector('svg:not([data-knob-initialized="true"])');
        if (svgElement) {
          svgElement.setAttribute('data-knob-initialized', 'true');
          
          // Initial update
          updateKnob(svgElement);

          // Handle click/drag interaction
          let isDragging = false;
          let startAngle, startValue;
          
          // Click animation
          svgElement.addEventListener('click', () => {
            const knobBody = svgElement.querySelector('.knob-body');
            
            // Apply "pressed" effect animation
            knobBody.setAttribute('r', '12'); // Smaller size
            knobBody.setAttribute('fill-opacity', '0.8');
            
            // After a short delay, restore normal size
            setTimeout(() => {
              knobBody.setAttribute('r', '14');
              knobBody.setAttribute('fill-opacity', '1');
              
              // Get current metadata
              const metadata = getMetadata(svgElement);
              if (!metadata.parameters) return;
              
              // Increment value slightly for click
              const min = metadata.parameters.min || 0;
              const max = metadata.parameters.max || 100;
              let newValue = (metadata.parameters.value || 50) + 5;
              if (newValue > max) newValue = min;
              
              // Update metadata
              metadata.parameters.value = newValue;
              svgElement.querySelector('metadata').textContent = JSON.stringify(metadata, null, 2);
              
              // Update display
              updateKnob(svgElement);
            }, 150);
          });
          
          // Poll for changes
          svgElement.pollingInterval = setInterval(() => {
            const metadata = getMetadata(svgElement);
            const params = metadata.parameters || {};
            const currentValue = svgElement.currentParams?.value;
            const currentColor = svgElement.currentParams?.color;

            if (params.value !== currentValue || 
                params.color !== currentColor || 
                params.isActive !== (svgElement.currentParams?.isActive)) {
              svgElement.currentParams = { ...params };
              updateKnob(svgElement);
            }
          }, 500);

          // Cleanup on removal
          window.addEventListener('beforeunload', () => {
            if (svgElement.pollingInterval) clearInterval(svgElement.pollingInterval);
          });
        }
      })();
    ]]></script>
    </defs>
</svg>
