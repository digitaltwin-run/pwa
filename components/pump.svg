<?xml version="1.0" encoding="UTF-8"?>
<svg xmlns="http://www.w3.org/2000/svg" width="70" height="60" viewBox="0 0 70 60" data-component-params="label,color,flowrate,flowratemin,flowratemax,unit,isactive,animationspeed,ison,isblinking,blinkrate">
    <metadata>
        <component id="pump-001" name="Centrifugal Pump" type="pump">
            <parameters>
                <label>P1</label>
                <color>#16a085</color>
                <flowRate>45</flowRate>
                <flowRateMin>0</flowRateMin>
                <flowRateMax>100</flowRateMax>
                <unit>m続/h</unit>
                <isActive>true</isActive>
                <animationSpeed>1.0</animationSpeed>
                <ison>false</ison><isblinking>false</isblinking><blinkrate>500</blinkrate></parameters>
        </component>
    </metadata>

    <defs>
        <script>
        <![CDATA[
            (function() {
                // Function to read metadata from SVG
                function getMetadata(svgElement) {
                    var metadataElement = svgElement.querySelector('metadata component');
                    if (metadataElement) {
                        try {
                            var parametersElement = metadataElement.querySelector('parameters');
                            if (parametersElement) {
                                var result = {
                                    parameters: {
                                        flowRate: parametersElement.querySelector('flowRate')?.textContent || '45',
                                        flowRateMin: parametersElement.querySelector('flowRateMin')?.textContent || '0',
                                        flowRateMax: parametersElement.querySelector('flowRateMax')?.textContent || '100',
                                        flowRateUnit: parametersElement.querySelector('unit')?.textContent || ' m続/h',
                                        isOn: parametersElement.querySelector('ison')?.textContent === 'true',
                                        speed: parametersElement.querySelector('animationSpeed')?.textContent || '1.0'
                                    }
                                };
                                return result;
                            }
                        } catch (e) {
                            console.warn('Error parsing pump metadata:', e);
                        }
                    }
                    return {};
                }

                // Function to update pump display
                function updatePump(svgElement) {
                    var metadata = getMetadata(svgElement);
                    var params = metadata.parameters || {};
                    
                    var flowText = svgElement.querySelector('.pump-flow-text');
                    if (flowText) {
                        var flow = parseFloat(params.flowRate) || 45;
                        var unit = params.flowRateUnit || ' m続/h';
                        flowText.textContent = flow.toFixed(1) + unit;
                    }
                    
                    // Handle animation
                    if (params.isOn) {
                        startPumpAnimation(svgElement, parseFloat(params.speed) || 1.0);
                    } else {
                        stopPumpAnimation(svgElement);
                    }
                }

                function startPumpAnimation(svgElement, speed) {
                    // Stop existing animation
                    if (svgElement.pumpAnimationId) {
                        cancelAnimationFrame(svgElement.pumpAnimationId);
                    }
                    
                    var angle = svgElement.pumpAngle || 0;
                    
                    function animate() {
                        if (!svgElement.isConnected) {
                            return;
                        }
                        
                        angle += 2 * speed;
                        if (angle >= 360) {
                            angle -= 360;
                        }
                        svgElement.pumpAngle = angle;
                        
                        var rotor = svgElement.querySelector('.pump-rotor');
                        if (rotor) {
                            rotor.setAttribute('transform', 'rotate(' + angle + ' 50 50)');
                        }
                        
                        var metadata = getMetadata(svgElement);
                        var params = metadata.parameters || {};
                        
                        if (params.isOn) {
                            svgElement.pumpAnimationId = requestAnimationFrame(animate);
                        }
                    }
                    
                    animate();
                }

                function stopPumpAnimation(svgElement) {
                    if (svgElement.pumpAnimationId) {
                        cancelAnimationFrame(svgElement.pumpAnimationId);
                        svgElement.pumpAnimationId = null;
                    }
                }

                function togglePump(svgElement) {
                    var metadataElement = svgElement.querySelector('metadata component');
                    if (metadataElement) {
                        var isOnElement = metadataElement.querySelector('parameters ison');
                        if (isOnElement) {
                            var currentState = isOnElement.textContent === 'true';
                            isOnElement.textContent = currentState ? 'false' : 'true';
                            updatePump(svgElement);
                        }
                    }
                }

                // Auto-initialize - find parent SVG element following led.svg pattern
                var svgElement = document.currentScript ? document.currentScript.closest('svg') : null;
                
                // If not found (exported SVG), search for SVG with pump components
                if (!svgElement) {
                    var allSvgs = document.querySelectorAll('svg');
                    for (var i = 0; i < allSvgs.length; i++) {
                        var svg = allSvgs[i];
                        if (svg.querySelector('.pump-rotor') && svg.querySelector('.pump-flow-text')) {
                            svgElement = svg;
                            break;
                        }
                    }
                }
                
                if (svgElement && !svgElement.hasAttribute('data-pump-initialized')) {
                    svgElement.setAttribute('data-pump-initialized', 'true');
                    
                    // Store unique identifier
                    svgElement.pumpInstanceId = 'pump-' + Math.random().toString(36).substr(2, 9);
                    
                    // Add click event listener
                    var clickArea = svgElement.querySelector('.pump-housing');
                    if (clickArea) {
                        clickArea.addEventListener('click', function(e) {
                            togglePump(svgElement);
                            e.stopPropagation();
                        });
                    }
                    
                    // Initial update
                    updatePump(svgElement);
                    
                    // Watch for parameter changes
                    svgElement.pollingInterval = setInterval(function() {
                        if (!svgElement.isConnected) {
                            // Cleanup if element removed
                            if (svgElement.pumpAnimationId) cancelAnimationFrame(svgElement.pumpAnimationId);
                            if (svgElement.pollingInterval) clearInterval(svgElement.pollingInterval);
                            return;
                        }
                        
                        var metadata = getMetadata(svgElement);
                        var params = metadata.parameters || {};
                        
                        // Initialize currentParams if needed
                        if (!svgElement.currentParams) {
                            svgElement.currentParams = {};
                        }
                        
                        // Check if parameters changed
                        var hasChanged = 
                            params.flowRate !== svgElement.currentParams.flowRate ||
                            params.isOn !== svgElement.currentParams.isOn ||
                            params.speed !== svgElement.currentParams.speed;
                            
                        if (hasChanged) {
                            svgElement.currentParams = { ...params };
                            updatePump(svgElement);
                        }
                    }, 500);
                    
                    // Cleanup function
                    function cleanupPump() {
                        if (svgElement.pumpAnimationId) cancelAnimationFrame(svgElement.pumpAnimationId);
                        if (svgElement.pollingInterval) clearInterval(svgElement.pollingInterval);
                    }
                }
            })();
        ]]>
        </script>
    </defs>

    <circle cx="35" cy="30" r="25" fill="#16a085" stroke="#138a76" stroke-width="3" class="pump-housing"/>
    <g id="impeller" class="pump-rotor">
        <path d="M25 20 L45 40 M45 20 L25 40" stroke="white" stroke-width="3" stroke-linecap="round"/>
    </g>
    <circle id="statusIndicator" cx="55" cy="15" r="4" fill="#e74c3c"/>
    <text id="label" x="35" y="20" font-size="12" text-anchor="middle" fill="white">P1</text>
    <text id="value" x="35" y="50" font-size="12" text-anchor="middle" fill="white" class="pump-flow-text">45 m続/h</text>
</svg>