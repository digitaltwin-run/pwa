<?xml version="1.0" encoding="UTF-8"?>
<svg xmlns="http://www.w3.org/2000/svg" width="70" height="60" viewBox="0 0 70 60" onload="initPump(evt)" data-component-params="label,color,flowrate,flowratemin,flowratemax,unit,isactive,animationspeed,ison,isblinking,blinkrate">
    <metadata>
        <component id="pump-001" name="Centrifugal Pump" type="pump">
            <parameters>
                <label>P1</label>
                <color>#16a085</color>
                <flowRate>45</flowRate>
                <flowRateMin>0</flowRateMin>
                <flowRateMax>100</flowRateMax>
                <unit>m続/h</unit>
                <isActive>true</isActive>
                <animationSpeed>1.0</animationSpeed>
            <ison>false</ison><isblinking>false</isblinking><blinkrate>500</blinkrate></parameters>
        </component>
    </metadata>

    <defs>
        <script type="text/ecmascript">
        <![CDATA[
            (function() {
                // Create instance-specific pump state
                var pumpInstance = {
                    flow: 45,
                    min: 0,
                    max: 100,
                    unit: ' m続/h',
                    isOn: false,
                    targetFlow: 45,
                    angle: 0,
                    speed: 1.0,
                    animationId: null,
                    svgElement: null
                };

                function initPumpInstance(evt) {
                    var svgEl = evt.target;
                    // Find the parent SVG element that contains this script
                    while (svgEl && svgEl.tagName !== 'svg') {
                        svgEl = svgEl.parentNode;
                    }
                    
                    if (!svgEl) {
                        console.error('Could not find parent SVG element for pump');
                        return;
                    }
                    
                    pumpInstance.svgElement = svgEl;
                    
                    // Mark this SVG as initialized to prevent double initialization
                    if (svgEl.getAttribute('data-pump-initialized')) {
                        return;
                    }
                    svgEl.setAttribute('data-pump-initialized', 'true');
                    
                    var params = getParams(svgEl);
                    
                    pumpInstance.flow = parseFloat(params.flowRate) || 45;
                    pumpInstance.min = parseFloat(params.flowRateMin) || 0;
                    pumpInstance.max = parseFloat(params.flowRateMax) || 100;
                    pumpInstance.unit = ' ' + (params.unit || 'm続/h');
                    pumpInstance.speed = parseFloat(params.animationSpeed) || 1.0;
                    pumpInstance.isOn = params.isActive === 'true';
                    
                    // Store instance reference on SVG element
                    svgEl.pumpInstance = pumpInstance;
                    
                    updateDisplay(svgEl);
                    animate(svgEl);
                    
                    console.log('Pump initialized for SVG element:', svgEl.getAttribute('data-id'));
                }
                
                function getParams(svg) {
                    var p = {};
                    var parametersElements = svg.getElementsByTagName('parameters');
                    if (parametersElements.length > 0) {
                        var elems = parametersElements[0].children;
                        for (var i = 0; i < elems.length; i++) {
                            p[elems[i].tagName] = elems[i].textContent;
                        }
                    }
                    return p;
                }
                
                function animate(svg) {
                    if (!svg || !svg.pumpInstance) return;
                    
                    var instance = svg.pumpInstance;
                    
                    if (instance.isOn && instance.flow > 0) {
                        var speed = instance.flow / instance.max * instance.speed;
                        instance.angle = (instance.angle + speed) % 360;
                        
                        var impeller = svg.querySelector('#impeller');
                        if (impeller) {
                            impeller.setAttribute('transform', 'rotate(' + instance.angle + ', 35, 30)');
                        }
                    }
                    
                    if (Math.abs(instance.flow - instance.targetFlow) > 0.1) {
                        instance.flow += (instance.targetFlow - instance.flow) * 0.1;
                        updateDisplay(svg);
                    }
                    
                    // Continue animation using instance-specific reference
                    instance.animationId = requestAnimationFrame(function() { 
                        animate(svg); 
                    });
                }
                
                function updateDisplay(svg) {
                    if (!svg || !svg.pumpInstance) return;
                    
                    var instance = svg.pumpInstance;
                    var value = svg.querySelector('#value');
                    if (value) value.textContent = Math.round(instance.flow) + instance.unit;
                    
                    var status = svg.querySelector('#statusIndicator');
                    if (status) {
                        status.setAttribute('fill', 
                            instance.isOn && instance.flow > 0 ? '#2ecc71' : '#e74c3c');
                    }
                }
                
                // Public API functions attached to SVG element
                function setupPumpAPI(svg) {
                    if (!svg.pumpInstance) return;
                    
                    svg.setPumpFlow = function(flow) {
                        svg.pumpInstance.targetFlow = Math.max(svg.pumpInstance.min, Math.min(svg.pumpInstance.max, flow));
                    };
                    
                    svg.setPumpState = function(on) {
                        svg.pumpInstance.isOn = on;
                        if (!on) svg.pumpInstance.targetFlow = 0;
                    };
                    
                    svg.getPumpFlow = function() {
                        return svg.pumpInstance.flow;
                    };
                }
                
                // Initialize when this script loads
                // Use a small delay to ensure DOM is ready
                setTimeout(function() {
                    initPumpInstance({ target: document.currentScript || document.scripts[document.scripts.length - 1] });
                }, 10);
            })();
        ]]>
        </script>
    </defs>

    <circle cx="35" cy="30" r="25" fill="#16a085" stroke="#138a76" stroke-width="3"/>
    <g id="impeller">
        <path d="M25 20 L45 40 M45 20 L25 40" stroke="white" stroke-width="3" stroke-linecap="round"/>
    </g>
    <circle id="statusIndicator" cx="55" cy="15" r="4" fill="#e74c3c"/>
    <text id="label" x="35" y="20" font-size="12" text-anchor="middle" fill="white">P1</text>
    <text id="value" x="35" y="50" font-size="12" text-anchor="middle" fill="white">45 m続/h</text>
</svg>