<?xml version="1.0" encoding="UTF-8"?>
<svg xmlns="http://www.w3.org/2000/svg"
     xmlns:xhtml="http://www.w3.org/1999/xhtml"
     width="40"
     height="40"
     viewBox="0 0 40 40">

    <title>Relay Component</title>
    <desc>Interactive relay component for digital twin</desc>

    <metadata>
        {
        "id": "relay-001",
        "name": "Relay",
        "type": "relay",
        "parameters": {
            "label": "Relay",
            "state": false,
            "color": "#e67e22",
            "size": 40,
            "inputVoltage": 5,
            "maxCurrent": 10,
            "isActive": true
            }
        }
    </metadata>

    <!-- Main body -->
    <rect x="5" y="5" width="30" height="25" rx="2" ry="2" fill="#34495e" stroke="#2c3e50" stroke-width="1.5"/>
    
    <!-- Contacts -->
    <rect x="7" y="10" width="26" height="3" fill="#95a5a6"/>
    <rect x="7" y="22" width="26" height="3" fill="#95a5a6"/>
    
    <!-- Indicator -->
    <circle class="relay-indicator" cx="20" cy="17" r="5" fill="#7f8c8d" stroke="#2c3e50" stroke-width="1"/>
    
    <!-- Label -->
    <text class="relay-label" x="20" y="36" font-size="8" text-anchor="middle" fill="#bdc3c7">Relay</text>

    <defs>
    <!-- Internal SVG script -->
    <script><![CDATA[
      (function() {
        // Function to read metadata
        function getMetadata(svgElement) {
          const metadataNode = svgElement.querySelector('metadata');
          if (metadataNode && metadataNode.textContent.trim()) {
            try {
              return JSON.parse(metadataNode.textContent);
            } catch (e) {
              console.warn('Error parsing metadata:', e);
              return {};
            }
          }
          return {};
        }

        // Function to update relay appearance
        function updateRelay(svgElement) {
          const metadata = getMetadata(svgElement);
          const params = metadata.parameters || {};
          
          const indicator = svgElement.querySelector('.relay-indicator');
          const labelEl = svgElement.querySelector('.relay-label');

          if (!indicator || !params.isActive) {
            if (indicator) indicator.setAttribute('fill', '#555');
            return;
          }

          // Update label
          if (labelEl && params.label) {
            labelEl.textContent = params.label;
          }

          // Update relay state
          indicator.setAttribute('fill', params.state ? params.color || '#e67e22' : '#7f8c8d');
        }

        // Initialize
        const svgElement = document.querySelector('svg:not([data-relay-initialized="true"])');
        if (svgElement) {
          svgElement.setAttribute('data-relay-initialized', 'true');
          
          // Initial update
          updateRelay(svgElement);

          // Poll for changes
          svgElement.pollingInterval = setInterval(() => {
            const metadata = getMetadata(svgElement);
            const params = metadata.parameters || {};
            const currentState = svgElement.currentParams?.state;
            const currentColor = svgElement.currentParams?.color;

            if (params.state !== currentState || 
                params.color !== currentColor || 
                params.isActive !== (svgElement.currentParams?.isActive)) {
              svgElement.currentParams = { ...params };
              updateRelay(svgElement);
            }
          }, 500);

          // Cleanup on removal
          window.addEventListener('beforeunload', () => {
            if (svgElement.pollingInterval) clearInterval(svgElement.pollingInterval);
          });
        }
      })();
    ]]></script>
    </defs>
</svg>
