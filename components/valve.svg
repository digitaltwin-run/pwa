<?xml version="1.0" encoding="UTF-8"?>
<svg xmlns="http://www.w3.org/2000/svg" width="60" height="60" viewBox="0 0 60 60" onload="initValve(evt)" data-component-params="label,color,position,positionmin,positionmax,flow,unit,isactive,animationspeed,ison,isblinking,blinkrate">
    <metadata>
        <component id="valve-001" name="Control Valve" type="valve">
            <parameters>
                <label>V1</label>
                <color>#95a5a6</color>
                <position>50</position>
                <positionMin>0</positionMin>
                <positionMax>100</positionMax>
                <flow>open</flow>
                <unit>%</unit>
                <isActive>true</isActive>
                <animationSpeed>1</animationSpeed>
            <ison>false</ison><isblinking>false</isblinking><blinkrate>500</blinkrate></parameters>
        </component>
    </metadata>

    <defs>
        <script type="text/ecmascript">
        <![CDATA[
            var valveParams = {
                position: 50,
                min: 0,
                max: 100,
                unit: '%',
                isMoving: false,
                targetPosition: 50,
                animationSpeed: 1
            };

            function initValve(evt) {
                var svg = evt.target.ownerDocument;
                var params = getParameters(svg);
                
                // Initialize parameters
                valveParams.position = parseFloat(params.position) || 50;
                valveParams.min = parseFloat(params.positionMin) || 0;
                valveParams.max = parseFloat(params.positionMax) || 100;
                valveParams.unit = params.unit || '%';
                valveParams.animationSpeed = parseFloat(params.animationSpeed) || 1;
                
                // Set initial state
                updateValveDisplay(svg);
                
                // Start animation loop
                setInterval(function() { updateValve(svg); }, 16);
            }
            
            function getParameters(svg) {
                var params = {};
                var paramElements = svg.getElementsByTagName('parameters')[0].children;
                for (var i = 0; i < paramElements.length; i++) {
                    var el = paramElements[i];
                    params[el.tagName] = el.textContent;
                }
                return params;
            }
            
            function updateValve(svg) {
                if (Math.abs(valveParams.position - valveParams.targetPosition) > 0.5) {
                    var direction = valveParams.position < valveParams.targetPosition ? 1 : -1;
                    valveParams.position += direction * valveParams.animationSpeed;
                    
                    // Clamp the value
                    valveParams.position = Math.max(valveParams.min, Math.min(valveParams.max, valveParams.position));
                    
                    updateValveDisplay(svg);
                }
            }
            
            function updateValveDisplay(svg) {
                // Update the position indicator (circle rotation)
                var circle = svg.getElementById('valveHandle');
                var valueText = svg.getElementById('value');
                var normalizedPos = (valveParams.position - valveParams.min) / (valveParams.max - valveParams.min);
                var rotation = normalizedPos * 180 - 45; // -45 to 135 degrees
                
                if (circle) {
                    circle.setAttribute('transform', `rotate(${rotation}, 30, 30)`);
                }
                
                if (valueText) {
                    valueText.textContent = Math.round(valveParams.position) + valveParams.unit;
                }
            }
            
            // Public API for external control
            function setValvePosition(position) {
                valveParams.targetPosition = Math.max(valveParams.min, Math.min(valveParams.max, position));
            }
            
            function setValveOpen(isOpen) {
                valveParams.targetPosition = isOpen ? valveParams.max : valveParams.min;
            }
            
            function getValvePosition() {
                return valveParams.position;
            }
        ]]>
        </script>
    </defs>

    <rect id="body" x="20" y="10" width="20" height="40" fill="#95a5a6" stroke="#7f8c8d" stroke-width="2" rx="4"/>
    <g id="valveHandle">
        <line x1="30" y1="30" x2="30" y2="15" stroke="#2c3e50" stroke-width="3" stroke-linecap="round"/>
        <circle cx="30" cy="30" r="12" fill="#7f8c8d" stroke="#2c3e50" stroke-width="2" fill-opacity="0.7"/>
    </g>
    <text id="label" x="30" y="20" font-size="12" text-anchor="middle" fill="white">V1</text>
    <text id="value" x="30" y="55" font-size="12" text-anchor="middle" fill="#2c3e50">50%</text>
</svg>