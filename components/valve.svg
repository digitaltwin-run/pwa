<?xml version="1.0" encoding="UTF-8"?>
<svg xmlns="http://www.w3.org/2000/svg" width="60" height="60" viewBox="0 0 60 60" data-component-params="label,color,position,positionmin,positionmax,flow,unit,isactive,animationspeed,ison,isblinking,blinkrate">
    <metadata>
        <component id="valve-001" name="Control Valve" type="valve">
            <parameters>
                <label>V1</label>
                <color>#95a5a6</color>
                <position>50</position>
                <positionMin>0</positionMin>
                <positionMax>100</positionMax>
                <flow>open</flow>
                <unit>%</unit>
                <isActive>true</isActive>
                <animationSpeed>1</animationSpeed>
            <ison>false</ison><isblinking>false</isblinking><blinkrate>500</blinkrate></parameters>
        </component>
    </metadata>

    <defs>
        <script>
        <![CDATA[
            (function() {
                // Function to read metadata from SVG
                function getMetadata(svgElement) {
                    var metadataElement = svgElement.querySelector('metadata component');
                    if (metadataElement) {
                        try {
                            var parametersElement = metadataElement.querySelector('parameters');
                            if (parametersElement) {
                                var result = {
                                    parameters: {
                                        isOpen: parametersElement.querySelector('isOpen')?.textContent === 'true',
                                        position: parseFloat(parametersElement.querySelector('position')?.textContent || '0'),
                                        label: parametersElement.querySelector('label')?.textContent || 'Valve'
                                    }
                                };
                                return result;
                            }
                        } catch (e) {
                            console.warn('Error parsing valve metadata:', e);
                        }
                    }
                    return {};
                }

                // Function to update valve display
                function updateValve(svgElement) {
                    var metadata = getMetadata(svgElement);
                    var params = metadata.parameters || {};
                    
                    var disc = svgElement.querySelector('.valve-disc');
                    if (disc) {
                        var rotation = params.position * 90; // 0-90 degrees
                        disc.setAttribute('transform', 'rotate(' + rotation + ' 40 30)');
                    }
                    
                    var indicator = svgElement.querySelector('.valve-indicator');
                    if (indicator) {
                        indicator.setAttribute('fill', params.isOpen ? '#2ecc71' : '#e74c3c');
                    }
                    
                    var status = svgElement.querySelector('.valve-status');
                    if (status) {
                        status.textContent = (params.position * 100).toFixed(0) + '%';
                    }
                    
                    var label = svgElement.querySelector('.valve-label');
                    if (label && params.label) {
                        label.textContent = params.label;
                    }
                }

                function toggleValve(svgElement) {
                    var metadataElement = svgElement.querySelector('metadata component');
                    if (metadataElement) {
                        var isOpenElement = metadataElement.querySelector('parameters isOpen');
                        var positionElement = metadataElement.querySelector('parameters position');
                        
                        if (isOpenElement && positionElement) {
                            var currentState = isOpenElement.textContent === 'true';
                            var newState = !currentState;
                            var newPosition = newState ? 1 : 0;
                            
                            isOpenElement.textContent = newState.toString();
                            positionElement.textContent = newPosition.toString();
                            
                            updateValve(svgElement);
                        }
                    }
                }

                // Auto-initialize - find parent SVG element following led.svg pattern
                var svgElement = document.currentScript ? document.currentScript.closest('svg') : null;
                
                // If not found (exported SVG), search for SVG with valve components
                if (!svgElement) {
                    var allSvgs = document.querySelectorAll('svg');
                    for (var i = 0; i < allSvgs.length; i++) {
                        var svg = allSvgs[i];
                        if (svg.querySelector('.valve-disc') && svg.querySelector('.valve-indicator')) {
                            svgElement = svg;
                            break;
                        }
                    }
                }
                
                if (svgElement && !svgElement.hasAttribute('data-valve-initialized')) {
                    svgElement.setAttribute('data-valve-initialized', 'true');
                    
                    // Store unique identifier
                    svgElement.valveInstanceId = 'valve-' + Math.random().toString(36).substr(2, 9);
                    
                    // Add click event listener
                    var clickArea = svgElement.querySelector('.valve-body');
                    if (clickArea) {
                        clickArea.addEventListener('click', function(e) {
                            toggleValve(svgElement);
                            e.stopPropagation();
                        });
                    }
                    
                    // Initial update
                    updateValve(svgElement);
                    
                    // Watch for parameter changes
                    svgElement.pollingInterval = setInterval(function() {
                        if (!svgElement.isConnected) {
                            // Cleanup if element removed
                            if (svgElement.pollingInterval) clearInterval(svgElement.pollingInterval);
                            return;
                        }
                        
                        var metadata = getMetadata(svgElement);
                        var params = metadata.parameters || {};
                        
                        // Initialize currentParams if needed
                        if (!svgElement.currentParams) {
                            svgElement.currentParams = {};
                        }
                        
                        // Check if parameters changed
                        var hasChanged = 
                            params.isOpen !== svgElement.currentParams.isOpen ||
                            params.position !== svgElement.currentParams.position ||
                            params.label !== svgElement.currentParams.label;
                            
                        if (hasChanged) {
                            svgElement.currentParams = { ...params };
                            updateValve(svgElement);
                        }
                    }, 500);
                    
                    // Cleanup function
                    function cleanupValve() {
                        if (svgElement.pollingInterval) clearInterval(svgElement.pollingInterval);
                    }
                }
            })();
        ]]>
        </script>
    </defs>

    <rect id="body" class="valve-body" x="20" y="10" width="20" height="40" fill="#95a5a6" stroke="#7f8c8d" stroke-width="2" rx="4"/>
    <g id="valveHandle" class="valve-disc">
    <g id="valveHandle">
        <line x1="30" y1="30" x2="30" y2="15" stroke="#2c3e50" stroke-width="3" stroke-linecap="round"/>
        <circle cx="30" cy="30" r="12" fill="#7f8c8d" stroke="#2c3e50" stroke-width="2" fill-opacity="0.7"/>
    </g>
    <text id="label" x="30" y="20" font-size="12" text-anchor="middle" fill="white">V1</text>
    <text id="value" x="30" y="55" font-size="12" text-anchor="middle" fill="#2c3e50">50%</text>
</svg>