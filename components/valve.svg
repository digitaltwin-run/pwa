<?xml version="1.0" encoding="UTF-8"?>
<svg xmlns="http://www.w3.org/2000/svg" width="60" height="60" viewBox="0 0 60 60" data-component-params="label,color,position,positionmin,positionmax,flow,unit,isactive,animationspeed,ison,isblinking,blinkrate">
    <metadata>
        <component id="valve-001" name="Control Valve" type="valve">
            <parameters>
                <label>V1</label>
                <color>#95a5a6</color>
                <position>50</position>
                <positionMin>0</positionMin>
                <positionMax>100</positionMax>
                <flow>open</flow>
                <unit>%</unit>
                <isActive>true</isActive>
                <animationSpeed>1</animationSpeed>
            <ison>false</ison><isblinking>false</isblinking><blinkrate>500</blinkrate></parameters>
        </component>
    </metadata>

    <defs>
        <script type="text/ecmascript">
        <![CDATA[
            (function() {
                // Create instance-specific valve state
                var valveInstance = {
                    position: 50,
                    min: 0,
                    max: 100,
                    unit: '%',
                    isMoving: false,
                    targetPosition: 50,
                    animationSpeed: 1,
                    animationId: null,
                    svgElement: null
                };

                function initValveInstance(evt) {
                    var svgEl = evt.target;
                    // Find the parent SVG element that contains this script
                    while (svgEl && svgEl.tagName !== 'svg') {
                        svgEl = svgEl.parentNode;
                    }
                    
                    if (!svgEl) {
                        console.error('Could not find parent SVG element for valve');
                        return;
                    }
                    
                    valveInstance.svgElement = svgEl;
                    
                    // Mark this SVG as initialized to prevent double initialization
                    if (svgEl.getAttribute('data-valve-initialized')) {
                        return;
                    }
                    svgEl.setAttribute('data-valve-initialized', 'true');
                    
                    var params = getParameters(svgEl);
                    
                    // Initialize parameters
                    valveInstance.position = parseFloat(params.position) || 50;
                    valveInstance.min = parseFloat(params.positionMin) || 0;
                    valveInstance.max = parseFloat(params.positionMax) || 100;
                    valveInstance.unit = params.unit || '%';
                    valveInstance.animationSpeed = parseFloat(params.animationSpeed) || 1;
                    valveInstance.targetPosition = valveInstance.position;
                    
                    // Store instance reference on SVG element
                    svgEl.valveInstance = valveInstance;
                    
                    // Set initial state
                    updateValveDisplay(svgEl);
                    
                    // Start animation loop
                    animate(svgEl);
                    
                    console.log('Valve initialized for SVG element:', svgEl.getAttribute('data-id'));
                }
                
                function getParameters(svg) {
                    var params = {};
                    var parametersElements = svg.getElementsByTagName('parameters');
                    if (parametersElements.length > 0) {
                        var paramElements = parametersElements[0].children;
                        for (var i = 0; i < paramElements.length; i++) {
                            var el = paramElements[i];
                            params[el.tagName] = el.textContent;
                        }
                    }
                    return params;
                }
                
                function animate(svg) {
                    if (!svg || !svg.valveInstance) return;
                    
                    updateValve(svg);
                    
                    // Continue animation using instance-specific reference
                    svg.valveInstance.animationId = requestAnimationFrame(function() { 
                        animate(svg); 
                    });
                }
                
                function updateValve(svg) {
                    if (!svg || !svg.valveInstance) return;
                    
                    var instance = svg.valveInstance;
                    
                    if (Math.abs(instance.position - instance.targetPosition) > 0.5) {
                        var direction = instance.position < instance.targetPosition ? 1 : -1;
                        instance.position += direction * instance.animationSpeed;
                        
                        // Clamp the value
                        instance.position = Math.max(instance.min, Math.min(instance.max, instance.position));
                        
                        updateValveDisplay(svg);
                    }
                }
                
                function updateValveDisplay(svg) {
                    if (!svg || !svg.valveInstance) return;
                    
                    var instance = svg.valveInstance;
                    // Update the position indicator (circle rotation)
                    var circle = svg.querySelector('#valveHandle');
                    var valueText = svg.querySelector('#value');
                    var normalizedPos = (instance.position - instance.min) / (instance.max - instance.min);
                    var rotation = normalizedPos * 180 - 45; // -45 to 135 degrees
                    
                    if (circle) {
                        circle.setAttribute('transform', 'rotate(' + rotation + ', 30, 30)');
                    }
                    
                    if (valueText) {
                        valueText.textContent = Math.round(instance.position) + instance.unit;
                    }
                }
                
                // Public API functions attached to SVG element
                function setupValveAPI(svg) {
                    if (!svg.valveInstance) return;
                    
                    svg.setValvePosition = function(position) {
                        svg.valveInstance.targetPosition = Math.max(svg.valveInstance.min, Math.min(svg.valveInstance.max, position));
                    };
                    
                    svg.setValveOpen = function(isOpen) {
                        svg.valveInstance.targetPosition = isOpen ? svg.valveInstance.max : svg.valveInstance.min;
                    };
                    
                    svg.getValvePosition = function() {
                        return svg.valveInstance.position;
                    };
                }
                
                // Initialize when this script loads
                // Use a small delay to ensure DOM is ready
                setTimeout(function() {
                    initValveInstance({ target: document.currentScript || document.scripts[document.scripts.length - 1] });
                }, 10);
            })();
        ]]>
        </script>
    </defs>

    <rect id="body" x="20" y="10" width="20" height="40" fill="#95a5a6" stroke="#7f8c8d" stroke-width="2" rx="4"/>
    <g id="valveHandle">
        <line x1="30" y1="30" x2="30" y2="15" stroke="#2c3e50" stroke-width="3" stroke-linecap="round"/>
        <circle cx="30" cy="30" r="12" fill="#7f8c8d" stroke="#2c3e50" stroke-width="2" fill-opacity="0.7"/>
    </g>
    <text id="label" x="30" y="20" font-size="12" text-anchor="middle" fill="white">V1</text>
    <text id="value" x="30" y="55" font-size="12" text-anchor="middle" fill="#2c3e50">50%</text>
</svg>