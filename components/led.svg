<?xml version="1.0" encoding="UTF-8"?>
<svg xmlns="http://www.w3.org/2000/svg"
     xmlns:xhtml="http://www.w3.org/1999/xhtml"
     width="40"
     height="40"
     viewBox="0 0 40 40">

    <title>REST API Client - Interactive HTTP Request Interface</title>
    <desc>A PHP-powered SVG interface for making REST API requests with customizable HTTP methods and request bodies</desc>

    <metadata>
        {
        "id": "led-001",
        "name": "Animated LED",
        "type": "led",
        "parameters": {
            "label": "LED",
            "color": "#e74c3c",
            "isOn": true,
            "isBlinking": true,
            "blinkRate": 500,
            "isActive": true
            }
        }
    </metadata>

    <!-- Obudowa -->
    <circle cx="20" cy="20" r="18" fill="#2c3e50" stroke="#1a252f" stroke-width="2"/>

    <!-- Diody (wewnętrzny ID) -->
    <circle class="led-core" cx="20" cy="20" r="12" fill="#555"/>

    <!-- Etykieta -->
    <text class="led-label" x="20" y="36" font-size="10" text-anchor="middle" fill="#bdc3c7">LED</text>
    <defs>
    <!-- Wewnętrzny skrypt SVG -->
    <script><![CDATA[
      (function() {
        // Funkcja do odczytu metadanych
        function getMetadata(svgElement) {
          const metadataNode = svgElement.querySelector('metadata');
          if (metadataNode && metadataNode.textContent.trim()) {
            try {
              return JSON.parse(metadataNode.textContent);
            } catch (e) {
              console.warn('Błąd parsowania metadanych:', e);
              return {};
            }
          }
          return {};
        }

        // Funkcja do aktualizacji wyglądu
        function updateLED(svgElement) {
          const metadata = getMetadata(svgElement);
          console.log('Metadane:', metadata);

          const params = metadata.parameters || {};
          const ledCore = svgElement.querySelector('.led-core');
          const labelEl = svgElement.querySelector('.led-label');

          if (!ledCore || !params.isActive) {
            if (ledCore) ledCore.setAttribute('fill', '#333');
            return;
          }

          // Aktualizuj etykietę
          if (labelEl && params.label) {
            labelEl.textContent = params.label;
          }

          // Obsługa migania
          if (params.isBlinking && params.isOn) {
            if (!svgElement.blinkInterval) {
              let on = true;
              svgElement.blinkInterval = setInterval(() => {
                ledCore.setAttribute('fill', on ? params.color : '#333');
                on = !on;
              }, params.blinkRate || 500);
            }
          } else {
            // Zatrzymaj miganie
            if (svgElement.blinkInterval) {
              clearInterval(svgElement.blinkInterval);
              svgElement.blinkInterval = null;
            }
            // Ustaw stan stały
            ledCore.setAttribute('fill', params.isOn ? params.color : '#333');
          }
        }

        // Inicjalizacja
        const svgElement = document.querySelector('svg:not([data-led-initialized="true"])');
        if (svgElement) {
          svgElement.setAttribute('data-led-initialized', 'true');
          
          // Initial update
          updateLED(svgElement);

          // Opcjonalnie: nasłuchiwanie zmian (jeśli IDE nadpisuje metadata)
          // Symulujemy "obserwatora" — co 500 ms sprawdzamy zmiany
          svgElement.pollingInterval = setInterval(() => {
            const metadata = getMetadata(svgElement);
            const params = metadata.parameters || {};
            const currentColor = svgElement.currentParams?.color;
            const isBlinking = svgElement.currentParams?.isBlinking;
            const isOn = svgElement.currentParams?.isOn;

            if (params.color !== currentColor ||
                params.isBlinking !== isBlinking ||
                params.isOn !== isOn ||
                params.isActive !== (svgElement.currentParams?.isActive)) {
              svgElement.currentParams = { ...params };
              updateLED(svgElement);
            }
          }, 500);

          // Ewentualna oczyszczka przy usunięciu
          window.addEventListener('beforeunload', () => {
            if (svgElement.blinkInterval) clearInterval(svgElement.blinkInterval);
            if (svgElement.pollingInterval) clearInterval(svgElement.pollingInterval);
          });
        }
      })();

  ]]></script>
    </defs>
</svg>
