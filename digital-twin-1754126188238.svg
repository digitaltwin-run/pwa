<svg id="canvas" width="100%" height="100%" xmlns="http://www.w3.org/2000/svg">
    <!-- Definicje: siatka i strzałka -->
    <defs>
        <marker id="arrow" viewBox="0 0 10 10" refX="5" refY="5" markerWidth="6" markerHeight="6"
                orient="auto-start-reverse">
            <path d="M 0 0 L 10 5 L 0 10 z" fill="#2c3e50"/>
        </marker>
        <pattern id="grid" width="20" height="20" patternUnits="userSpaceOnUse">
            <path d="M 20 0 L 0 0 0 20" fill="none" stroke="#ddd" stroke-width="0.5"/>
        </pattern>
    </defs>
    <rect width="100%" height="100%" fill="url(#grid)"/>
    <!-- Komponenty i linie będą dodawane tutaj -->
    <svg xmlns="http://www.w3.org/2000/svg" xmlns:xhtml="http://www.w3.org/1999/xhtml" width="40" height="40"
         viewBox="0 0 40 40" data-id="comp-0" data-svg-url="components/led.svg" class="draggable-component"
         style="cursor: move;" x="706" y="319">

        <title>REST API Client - Interactive HTTP Request Interface</title>
        <desc>A PHP-powered SVG interface for making REST API requests with customizable HTTP methods and request
            bodies
        </desc>

        <metadata>{
            "id": "led-001",
            "name": "Animated LED",
            "type": "led",
            "parameters": {
            "label": "LED",
            "color": "#e74c3c",
            "isOn": true,
            "isBlinking": true,
            "blinkRate": 100,
            "isActive": true
            },
            "position": {
            "x": 731,
            "y": 344
            },
            "instanceId": "comp-0"
            }
        </metadata>

        <!-- Obudowa -->
        <circle cx="20" cy="20" r="18" fill="#2c3e50" stroke="#1a252f" stroke-width="2"/>

        <!-- Diody (wewnętrzny ID) -->
        <circle id="led-core" cx="20" cy="20" r="12" fill="#555"/>

        <!-- Etykieta -->
        <text id="label" x="20" y="36" font-size="10" text-anchor="middle" fill="#bdc3c7">LED</text>
        <defs>
            <!-- Wewnętrzny skrypt SVG -->
            <script><![CDATA[
      // Sprawdź, czy jesteśmy w DOM (po załadowaniu)
      const svg = document.currentScript.closest('svg');

      // Funkcja do odczytu metadanych
      function getMetadata() {
        const metadataNode = svg.querySelector('metadata');
        if (metadataNode && metadataNode.textContent.trim()) {
          try {
            return JSON.parse(metadataNode.textContent);
          } catch (e) {
            console.warn('Błąd parsowania metadanych:', e);
            return {};
          }
        }
        return {};
      }

      // Funkcja do aktualizacji wyglądu
      function updateLED() {
        const metadata = getMetadata();
        console.log('Metadane:', metadata);

        const params = metadata.parameters || {};
        const ledCore = svg.querySelector('#led-core');
        const labelEl = svg.querySelector('#label');

        if (!ledCore || !params.isActive) {
          if (ledCore) ledCore.setAttribute('fill', '#333');
          return;
        }

        // Aktualizuj etykietę
        if (labelEl && params.label) {
          labelEl.textContent = params.label;
        }

        // Obsługa migania
        if (params.isBlinking && params.isOn) {
          if (!svg.blinkInterval) {
            let on = true;
            svg.blinkInterval = setInterval(() => {
              ledCore.setAttribute('fill', on ? params.color : '#333');
              on = !on;
            }, params.blinkRate);
          }
        } else {
          // Zatrzymaj miganie
          if (svg.blinkInterval) {
            clearInterval(svg.blinkInterval);
            svg.blinkInterval = null;
          }
          // Ustaw stan stały
          ledCore.setAttribute('fill', params.isOn ? params.color : '#333');
        }
      }

      // Inicjalizacja
      updateLED();

      // Opcjonalnie: nasłuchiwanie zmian (jeśli IDE nadpisuje metadata)
      // Symulujemy "obserwatora" — co 500 ms sprawdzamy zmiany
      svg.pollingInterval = setInterval(() => {
        const metadata = getMetadata();
        const params = metadata.parameters || {};
        const currentColor = svg.currentParams?.color;
        const isBlinking = svg.currentParams?.isBlinking;
        const isOn = svg.currentParams?.isOn;

        if (params.color !== currentColor ||
            params.isBlinking !== isBlinking ||
            params.isOn !== isOn ||
            params.isActive !== (svg.currentParams?.isActive)) {
          svg.currentParams = { ...params };
          updateLED();
        }
      }, 500);

      // Ewentualna oczyszczka przy usunięciu
      window.addEventListener('beforeunload', () => {
        if (svg.blinkInterval) clearInterval(svg.blinkInterval);
        if (svg.pollingInterval) clearInterval(svg.pollingInterval);
      });

  ]]></script>
        </defs>
    </svg>
    <svg xmlns="http://www.w3.org/2000/svg" xmlns:xhtml="http://www.w3.org/1999/xhtml" width="40" height="40"
         viewBox="0 0 40 40" data-id="comp-1" data-svg-url="components/led.svg" class="draggable-component"
         style="cursor: move;" x="883" y="302">

        <title>REST API Client - Interactive HTTP Request Interface</title>
        <desc>A PHP-powered SVG interface for making REST API requests with customizable HTTP methods and request
            bodies
        </desc>

        <metadata>{
            "id": "led-001",
            "name": "Animated LED",
            "type": "led",
            "parameters": {
            "label": "LED",
            "color": "#e74c3c",
            "isOn": true,
            "isBlinking": true,
            "blinkRate": 500,
            "isActive": true
            },
            "position": {
            "x": 908,
            "y": 327
            },
            "instanceId": "comp-1"
            }
        </metadata>

        <!-- Obudowa -->
        <circle cx="20" cy="20" r="18" fill="#2c3e50" stroke="#1a252f" stroke-width="2"/>

        <!-- Diody (wewnętrzny ID) -->
        <circle id="led-core" cx="20" cy="20" r="12" fill="#555"/>

        <!-- Etykieta -->
        <text id="label" x="20" y="36" font-size="10" text-anchor="middle" fill="#bdc3c7">LED</text>
        <defs>
            <!-- Wewnętrzny skrypt SVG -->
            <script><![CDATA[
      // Sprawdź, czy jesteśmy w DOM (po załadowaniu)
      const svg = document.currentScript.closest('svg');

      // Funkcja do odczytu metadanych
      function getMetadata() {
        const metadataNode = svg.querySelector('metadata');
        if (metadataNode && metadataNode.textContent.trim()) {
          try {
            return JSON.parse(metadataNode.textContent);
          } catch (e) {
            console.warn('Błąd parsowania metadanych:', e);
            return {};
          }
        }
        return {};
      }

      // Funkcja do aktualizacji wyglądu
      function updateLED() {
        const metadata = getMetadata();
        console.log('Metadane:', metadata);

        const params = metadata.parameters || {};
        const ledCore = svg.querySelector('#led-core');
        const labelEl = svg.querySelector('#label');

        if (!ledCore || !params.isActive) {
          if (ledCore) ledCore.setAttribute('fill', '#333');
          return;
        }

        // Aktualizuj etykietę
        if (labelEl && params.label) {
          labelEl.textContent = params.label;
        }

        // Obsługa migania
        if (params.isBlinking && params.isOn) {
          if (!svg.blinkInterval) {
            let on = true;
            svg.blinkInterval = setInterval(() => {
              ledCore.setAttribute('fill', on ? params.color : '#333');
              on = !on;
            }, params.blinkRate);
          }
        } else {
          // Zatrzymaj miganie
          if (svg.blinkInterval) {
            clearInterval(svg.blinkInterval);
            svg.blinkInterval = null;
          }
          // Ustaw stan stały
          ledCore.setAttribute('fill', params.isOn ? params.color : '#333');
        }
      }

      // Inicjalizacja
      updateLED();

      // Opcjonalnie: nasłuchiwanie zmian (jeśli IDE nadpisuje metadata)
      // Symulujemy "obserwatora" — co 500 ms sprawdzamy zmiany
      svg.pollingInterval = setInterval(() => {
        const metadata = getMetadata();
        const params = metadata.parameters || {};
        const currentColor = svg.currentParams?.color;
        const isBlinking = svg.currentParams?.isBlinking;
        const isOn = svg.currentParams?.isOn;

        if (params.color !== currentColor ||
            params.isBlinking !== isBlinking ||
            params.isOn !== isOn ||
            params.isActive !== (svg.currentParams?.isActive)) {
          svg.currentParams = { ...params };
          updateLED();
        }
      }, 500);

      // Ewentualna oczyszczka przy usunięciu
      window.addEventListener('beforeunload', () => {
        if (svg.blinkInterval) clearInterval(svg.blinkInterval);
        if (svg.pollingInterval) clearInterval(svg.pollingInterval);
      });

  ]]></script>
        </defs>
    </svg>
    <svg xmlns="http://www.w3.org/2000/svg" xmlns:xhtml="http://www.w3.org/1999/xhtml" width="40" height="40"
         viewBox="0 0 40 40" data-id="comp-2" data-svg-url="components/led.svg" class="draggable-component"
         style="cursor: move;" x="769" y="385">

        <title>REST API Client - Interactive HTTP Request Interface</title>
        <desc>A PHP-powered SVG interface for making REST API requests with customizable HTTP methods and request
            bodies
        </desc>

        <metadata>{
            "id": "led-001",
            "name": "Animated LED",
            "type": "led",
            "parameters": {
            "label": "LED",
            "color": "#e74c3c",
            "isOn": true,
            "isBlinking": true,
            "blinkRate": 200,
            "isActive": true
            },
            "position": {
            "x": 794,
            "y": 410
            },
            "instanceId": "comp-2"
            }
        </metadata>

        <!-- Obudowa -->
        <circle cx="20" cy="20" r="18" fill="#2c3e50" stroke="#1a252f" stroke-width="2"/>

        <!-- Diody (wewnętrzny ID) -->
        <circle id="led-core" cx="20" cy="20" r="12" fill="#555"/>

        <!-- Etykieta -->
        <text id="label" x="20" y="36" font-size="10" text-anchor="middle" fill="#bdc3c7">LED</text>
        <defs>
            <!-- Wewnętrzny skrypt SVG -->
            <script><![CDATA[
      // Sprawdź, czy jesteśmy w DOM (po załadowaniu)
      const svg = document.currentScript.closest('svg');

      // Funkcja do odczytu metadanych
      function getMetadata() {
        const metadataNode = svg.querySelector('metadata');
        if (metadataNode && metadataNode.textContent.trim()) {
          try {
            return JSON.parse(metadataNode.textContent);
          } catch (e) {
            console.warn('Błąd parsowania metadanych:', e);
            return {};
          }
        }
        return {};
      }

      // Funkcja do aktualizacji wyglądu
      function updateLED() {
        const metadata = getMetadata();
        console.log('Metadane:', metadata);

        const params = metadata.parameters || {};
        const ledCore = svg.querySelector('#led-core');
        const labelEl = svg.querySelector('#label');

        if (!ledCore || !params.isActive) {
          if (ledCore) ledCore.setAttribute('fill', '#333');
          return;
        }

        // Aktualizuj etykietę
        if (labelEl && params.label) {
          labelEl.textContent = params.label;
        }

        // Obsługa migania
        if (params.isBlinking && params.isOn) {
          if (!svg.blinkInterval) {
            let on = true;
            svg.blinkInterval = setInterval(() => {
              ledCore.setAttribute('fill', on ? params.color : '#333');
              on = !on;
            }, params.blinkRate);
          }
        } else {
          // Zatrzymaj miganie
          if (svg.blinkInterval) {
            clearInterval(svg.blinkInterval);
            svg.blinkInterval = null;
          }
          // Ustaw stan stały
          ledCore.setAttribute('fill', params.isOn ? params.color : '#333');
        }
      }

      // Inicjalizacja
      updateLED();

      // Opcjonalnie: nasłuchiwanie zmian (jeśli IDE nadpisuje metadata)
      // Symulujemy "obserwatora" — co 500 ms sprawdzamy zmiany
      svg.pollingInterval = setInterval(() => {
        const metadata = getMetadata();
        const params = metadata.parameters || {};
        const currentColor = svg.currentParams?.color;
        const isBlinking = svg.currentParams?.isBlinking;
        const isOn = svg.currentParams?.isOn;

        if (params.color !== currentColor ||
            params.isBlinking !== isBlinking ||
            params.isOn !== isOn ||
            params.isActive !== (svg.currentParams?.isActive)) {
          svg.currentParams = { ...params };
          updateLED();
        }
      }, 500);

      // Ewentualna oczyszczka przy usunięciu
      window.addEventListener('beforeunload', () => {
        if (svg.blinkInterval) clearInterval(svg.blinkInterval);
        if (svg.pollingInterval) clearInterval(svg.pollingInterval);
      });

  ]]></script>
        </defs>
    </svg>
    <svg xmlns="http://www.w3.org/2000/svg" width="60" height="60" viewBox="0 0 60 60" data-id="comp-3"
         data-svg-url="components/sensor.svg" class="draggable-component" style="cursor: move; outline: red solid 2px;"
         x="812" y="229">
        <metadata>{
            "id": "sensor-001",
            "name": "Temperature Sensor",
            "type": "sensor",
            "parameters": {
            "label": "Temp",
            "color": "#e74c3c",
            "size": 50,
            "value": 25,
            "minValue": -20,
            "maxValue": 120,
            "unit": "°C",
            "isActive": true
            },
            "position": {
            "x": 837,
            "y": 254
            },
            "instanceId": "comp-3"
            }
        </metadata>

        <rect id="body" x="5" y="5" width="50" height="50" rx="8" fill="#e74c3c" stroke="#c0392b" stroke-width="2"/>
        <text id="label" x="30" y="20" font-size="12" text-anchor="middle" fill="white">Temp</text>
        <text id="value" x="30" y="38" font-size="14" text-anchor="middle" fill="white">25°C</text>
        <circle cx="30" cy="50" r="4" fill="#ecf0f1"/>
    </svg>
</svg>
